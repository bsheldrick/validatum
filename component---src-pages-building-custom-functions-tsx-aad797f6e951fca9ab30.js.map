{"version":3,"sources":["webpack:///./src/components/inlineCode.tsx","webpack:///./src/pages/building/custom-functions.tsx","webpack:///./src/components/validatorFuncs.tsx"],"names":["InlineCode","code","className","children","rest","classes","CustomFunctions","label","to","ValidatorFunction","name","description","methods","brokenRule","id","map","method","CodeExample"],"mappings":"wKAwBeA,IAjByB,SAAC,GAKnC,IAJJC,EAII,EAJJA,KACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,SACGC,E,oIACC,oCACAC,EAAU,cAId,OAHIH,IACFG,EAAaA,EAAN,IAAiBH,GAGxB,wCAAMA,UAAWG,GAAaD,GAC3BH,GAAcE,K,kCCnBrB,gFAkFeG,UA7Cf,WACE,OACE,kBAAC,IAAD,KACE,gDACA,8KAIA,wBAAIJ,UAAU,SACd,mEAEE,kBAAC,IAAD,CAAYD,KAAK,+BAFnB,YAIA,kCACM,kBAAC,IAAD,CAAYA,KAAK,yBADvB,8EAGE,kBAAC,IAAD,CAAYA,KAAK,yBAHnB,yBAGmE,IACjE,kBAAC,IAAD,CAAYA,KAAK,SAJnB,KAMA,2BACE,yCACA,kBAAC,IAAD,CAAYA,KAAK,qDAAsD,IACvE,6BAHF,MAIK,kBAAC,IAAD,CAAYA,KAAK,cAJtB,oCAMA,wBAAIC,UAAU,4CAAd,iBAGA,kBAAC,IAAD,CACEK,MAAM,sCACNN,KA3Cc,kTA6ChB,kBAAC,IAAD,CAAaM,MAAM,wBAAwBN,KA/D3B,2cAgEhB,wBAAIC,UAAU,QAAd,YACA,wBAAIA,UAAU,QACZ,4BACE,kBAAC,OAAD,CAAMM,GAAG,gCAAT,oC,iKC9DGC,EAAuC,SAAC,GAM/C,IALJC,EAKI,EALJA,KACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,WACAV,EACI,EADJA,SAEA,OACE,yBAAKD,UAAU,OAAOY,GAAIJ,GACxB,wBAAIR,UAAU,iBAAiBQ,GAC/B,2BAAIC,GACJ,wBAAIT,UAAU,4CAAd,WACCU,EAAQG,KAAI,SAACC,GAAD,OACX,oCACE,kBAAC,IAAD,CAAYd,UAAU,mDACnBc,GAEH,iCAGJ,wBAAId,UAAU,4CAAd,eACA,uBAAGA,UAAU,4DACVW,GAEH,wBAAIX,UAAU,4CAAd,iBAGCC,IAUMc,EAAoC,SAAC,GAAD,IAAGV,EAAH,EAAGA,MAAON,EAAV,EAAUA,KAAV,OAC/C,oCACGM,GAAS,uBAAGL,UAAU,gCAAgCK,GACvD,kBAAC,IAAD,CAAQN,KAAMA","file":"component---src-pages-building-custom-functions-tsx-aad797f6e951fca9ab30.js","sourcesContent":["import React, { FC } from \"react\"\n\ntype InlineCodeProps = {\n  code?: string\n  className?: string\n}\n\nconst InlineCode: FC<InlineCodeProps> = ({\n  code,\n  className,\n  children,\n  ...rest\n}) => {\n  let classes = \"inline-code\"\n  if (className) {\n    classes = `${classes} ${className}`\n  }\n  return (\n    <span className={classes} {...rest}>\n      {code ? code : children}\n    </span>\n  )\n}\n\nexport default InlineCode\n","import { Link } from \"gatsby\"\nimport React, { ReactElement } from \"react\"\nimport InlineCode from \"../../components/inlineCode\"\nimport Layout from \"../../components/layout\"\nimport { CodeExample } from \"../../components/validatorFuncs\"\n\nconst methodExample = `public static class ValidatorFuncs\n{\n    public static void IntegerValidator(ValidationContext<int> ctx)\n    {\n        // test the value in the context\n        if (ctx.Value == 13)\n        {\n            // add broken rule\n            ctx.AddBrokenRule(\"NotThirteen\", \"Unlucky\", \"Value cannot equal 13\");\n        }\n    }\n}\n\nvar builder = new ValidatorBuilder<int>();\n\n// delegate method added\nbuilder.With(ValidatorFuncs.IntegerValidator);`\n\nconst lambdaExample = `var builder = new ValidatorBuilder<int>();\n\n// delegate lambda function added inline\nbuilder.With(ctx => \n{\n    // test the value in the context\n    if (ctx.Value == 13)\n    {\n        // add broken rule\n        ctx.AddBrokenRule(\"NotThirteen\", \"Unlucky\", \"Value cannot equal 13\");\n    }\n});`\n\nfunction CustomFunctions(): ReactElement {\n  return (\n    <Layout>\n      <h1>Custom Functions</h1>\n      <p>\n        Custom functions can be added to a validator when you require specific\n        validation to be performed that is not available as a built-in function.\n      </p>\n      <hr className=\"my-6\" />\n      <p>\n        You can add a custom function via the\n        <InlineCode code=\"With(ValidatorDelegate<T>)\" /> method.\n      </p>\n      <p>\n        The <InlineCode code=\"ValidatorDelegate<T>\" /> parameter is a delegate\n        type that defines a method signature with a single\n        <InlineCode code=\"ValidationContext<T>\" /> parameter and returns{\" \"}\n        <InlineCode code=\"void\" />.\n      </p>\n      <p>\n        <strong>e.g. </strong>\n        <InlineCode code=\"void MyValidatorFunc(ValidationContext<int> ctx)\" />{\" \"}\n        <br />\n        or <InlineCode code=\"ctx => {}\" /> when using a lambda expression.\n      </p>\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">\n        Example Usage\n      </h5>\n      <CodeExample\n        label=\"Using lambda function (recommended)\"\n        code={lambdaExample}\n      />\n      <CodeExample label=\"Using delegate method\" code={methodExample} />\n      <h2 className=\"mt-8\">See also</h2>\n      <ul className=\"list\">\n        <li>\n          <Link to=\"/advanced/extension-methods/\">\n            Extending IValidatorBuilder\n          </Link>\n        </li>\n      </ul>\n    </Layout>\n  )\n}\n\nexport default CustomFunctions\n","import React, { FC } from \"react\"\nimport InlineCode from \"./inlineCode\"\nimport CSharp from \"./csharp\"\n\ntype FunctionProps = {\n  name: string\n  description: string\n  methods: string[]\n  brokenRule?: string\n}\n\nexport const ValidatorFunction: FC<FunctionProps> = ({\n  name,\n  description,\n  methods,\n  brokenRule,\n  children,\n}) => {\n  return (\n    <div className=\"mb-4\" id={name}>\n      <h2 className=\"font-semibold\">{name}</h2>\n      <p>{description}</p>\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Methods</h5>\n      {methods.map((method) => (\n        <>\n          <InlineCode className=\"text-sm font-semibold text-blue-600 bg-blue-100\">\n            {method}\n          </InlineCode>\n          <br />\n        </>\n      ))}\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Broken Rule</h5>\n      <p className=\"font-semibold font-mono text-sm text-red-600 inline px-1\">\n        {brokenRule}\n      </p>\n      <h5 className=\"font-semibold text-gray-800 text-sm mt-4\">\n        Example Usage\n      </h5>\n      {children}\n    </div>\n  )\n}\n\ntype CodeExampleProps = {\n  code: string\n  label?: string | JSX.Element\n}\n\nexport const CodeExample: FC<CodeExampleProps> = ({ label, code }) => (\n  <>\n    {label && <p className=\"text-gray-700 mb-0 pb-0 mt-4\">{label}</p>}\n    <CSharp code={code} />\n  </>\n)\n"],"sourceRoot":""}