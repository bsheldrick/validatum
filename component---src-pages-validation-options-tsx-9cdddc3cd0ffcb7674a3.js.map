{"version":3,"sources":["webpack:///./src/components/inlineCode.tsx","webpack:///./src/pages/validation/options.tsx","webpack:///./src/components/validatorFuncs.tsx"],"names":["InlineCode","code","className","children","rest","classes","ValidationOptions","ValidatorFunction","name","description","methods","brokenRule","id","map","method","CodeExample","label"],"mappings":"yKAwBeA,IAjByB,SAAC,GAKnC,IAJJC,EAII,EAJJA,KACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,SACGC,E,oIACC,oCACAC,EAAU,cAId,OAHIH,IACFG,EAAaA,EAAN,IAAiBH,GAGxB,wCAAMA,UAAWG,GAAaD,GAC3BH,GAAcE,K,kCCnBrB,oEA8JeG,UAlEf,WACE,OACE,kBAAC,IAAD,KACE,kDACA,kCACM,kBAAC,IAAD,CAAYL,KAAK,sBADvB,qIAKA,sNAG0C,IACxC,kBAAC,IAAD,CAAYA,KAAK,sBAJnB,KAMA,wBAAIC,UAAU,SACd,wBAAIA,UAAU,8BAAd,cACA,kBAAC,IAAD,CACEA,UAAU,kDACVD,KAAK,oBAEP,uBAAGC,UAAU,QAAb,uFAEa,yCAFb,KAIA,yGAEM,kBAAC,IAAD,CAAYD,KAAK,qBAFvB,6DAKA,wBAAIC,UAAU,8BAAd,iBACA,kBAAC,IAAD,CAAaD,KAtHC,s1BAuHd,wBAAIC,UAAU,SACd,kBAAC,IAAD,CACEA,UAAU,kDACVD,KAAK,qBAEP,uBAAGC,UAAU,QAAb,8BAC6B,kBAAC,IAAD,CAAYD,KAAK,wBAAyB,IADvE,qCAEoC,yCAFpC,KAIA,+IAIA,wBAAIC,UAAU,8BAAd,iBACA,kBAAC,IAAD,CAAaD,KAxGE,8gCAyGf,wBAAIC,UAAU,SACd,kBAAC,IAAD,CACEA,UAAU,kDACVD,KAAK,8BAEP,uBAAGC,UAAU,QAAb,6FAEoB,wCAFpB,KAIA,sIAIA,wBAAIA,UAAU,8BAAd,iBACA,kBAAC,IAAD,CAAaD,KAnFA,4jB,iKC3DNM,EAAuC,SAAC,GAM/C,IALJC,EAKI,EALJA,KACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,WACAR,EACI,EADJA,SAEA,OACE,yBAAKD,UAAU,OAAOU,GAAIJ,GACxB,wBAAIN,UAAU,iBAAiBM,GAC/B,2BAAIC,GACJ,wBAAIP,UAAU,4CAAd,WACCQ,EAAQG,KAAI,SAACC,GAAD,OACX,oCACE,kBAAC,IAAD,CAAYZ,UAAU,mDACnBY,GAEH,iCAGJ,wBAAIZ,UAAU,4CAAd,eACA,uBAAGA,UAAU,4DACVS,GAEH,wBAAIT,UAAU,4CAAd,iBAGCC,IAUMY,EAAoC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOf,EAAV,EAAUA,KAAV,OAC/C,oCACGe,GAAS,uBAAGd,UAAU,gCAAgCc,GACvD,kBAAC,IAAD,CAAQf,KAAMA","file":"component---src-pages-validation-options-tsx-9cdddc3cd0ffcb7674a3.js","sourcesContent":["import React, { FC } from \"react\"\n\ntype InlineCodeProps = {\n  code?: string\n  className?: string\n}\n\nconst InlineCode: FC<InlineCodeProps> = ({\n  code,\n  className,\n  children,\n  ...rest\n}) => {\n  let classes = \"inline-code\"\n  if (className) {\n    classes = `${classes} ${className}`\n  }\n  return (\n    <span className={classes} {...rest}>\n      {code ? code : children}\n    </span>\n  )\n}\n\nexport default InlineCode\n","import React, { ReactElement } from \"react\"\nimport InlineCode from \"../../components/inlineCode\"\nimport Layout from \"../../components/layout\"\nimport { CodeExample } from \"../../components/validatorFuncs\"\n\nconst stopExample = `var validator = new ValidatorBuilder<Employee>()\n    .Required(e => e.FirstName)\n    .Email(e => e.Email)\n    .Range(e => e.Salary, 50000, 100000)\n    .LessThanOrEqual(e => e.Commenced, DateTime.Today) // this won't be executed\n    .Build();\n    \n// validation will stop on first error\nvar result = validator.Validate(\n    new Employee\n    {\n        FirstName = \"Robbo\",\n        Email = \"rob@bo.xyz\",\n        Salary = 40000,            // this is invalid\n        Commenced = DateTime.Today // this is also invalid\n    }, \n    new ValidationOptions \n    { \n        StopWhenInvalid = true \n    });\n\nforeach (var rule in result.BrokenRules)\n{\n    Console.WriteLine($\"[{rule.Rule}] {rule.Key}: {rule.Message}\");\n}\n\n// output - only the first validation error\n// [Range] Salary: Value must be in range '50000' to '100000'.`\n\nconst throwExample = `var validator = new ValidatorBuilder<Employee>()\n    .Required(e => e.FirstName)\n    .Email(e => e.Email)\n    .Range(e => e.Salary, 50000, 100000)\n    .LessThanOrEqual(e => e.Commenced, DateTime.Today, message: \"Date cannot be in the future.\")\n    .Build();\n    \n// validation will throw an exception\ntry\n{\n    validator.Validate(\n        new Employee\n        {\n          FirstName = \"Robbo\",\n          Email = \"rob@bo.xyz\",\n          Salary = 40000,            // this is invalid\n          Commenced = DateTime.Today // this is also invalid\n        }, \n        new ValidationOptions \n        { \n          ThrowWhenInvalid = true \n        });    \n}\ncatch (ValidationException ex)\n{\n    // broken rules can be accessed in the exception\n    foreach (var rule in ex.BrokenRules)\n    {\n      Console.WriteLine($\"[{rule.Rule}] {rule.Key}: {rule.Message}\");\n    }\n}\n\n// output\n// [Range] Salary: Value must be in range '50000' to '100000'.\n// [LessThanOrEqual] Commenced: Date cannot be in the future.`\n\nconst addExample = `var validator = new ValidatorBuilder<string>()\n    .With(ctx => \n    {\n        throw new InvalidOperationException(\"Error\");\n    })\n    .Build();\n    \n// the exception will be added to broken rules collection and not thrown\nvar result = validator.Validate(\"validate\", \n    new ValidationOptions \n    { \n        AddBrokenRuleForException = true // this is the default\n    });\n\nforeach (var rule in result.BrokenRules)\n{\n    Console.WriteLine($\"[{rule.Rule}] {rule.Key}: {rule.Message}\");\n}\n\n// output\n// [InvalidOperationException] String: Error`\n\nfunction ValidationOptions(): ReactElement {\n  return (\n    <Layout>\n      <h1>Validation Options</h1>\n      <p>\n        The <InlineCode code=\"ValidationOptions\" /> class contains properties\n        that controls the flow of execution when a validation rule is broken or\n        an unhandled exception occurs.\n      </p>\n      <p>\n        By default, Validatum will execute all validation functions in order and\n        any exceptions will be added to the broken rules collection. Exceptions\n        are not thrown unless explicitly set in{\" \"}\n        <InlineCode code=\"ValidationOptions\" />.\n      </p>\n      <hr className=\"my-6\" />\n      <h5 className=\"font-semibold text-sm mb-4\">Properties</h5>\n      <InlineCode\n        className=\"text-sm text-blue-600 bg-blue-100 font-semibold\"\n        code=\"StopWhenInvalid\"\n      />\n      <p className=\"mt-4\">\n        Indicates whether to stop validation when the first invalid rule occurs.\n        Default is <strong>false</strong>.\n      </p>\n      <p>\n        When set to true, execution of the validator will immediately end with\n        the <InlineCode code=\"ValidationResult\" /> containing a single item in\n        the broken rules collection.\n      </p>\n      <h5 className=\"font-semibold text-sm my-4\">Example Usage</h5>\n      <CodeExample code={stopExample} />\n      <hr className=\"my-6\" />\n      <InlineCode\n        className=\"text-sm text-blue-600 bg-blue-100 font-semibold\"\n        code=\"ThrowWhenInvalid\"\n      />\n      <p className=\"mt-4\">\n        Indicates whether to throw <InlineCode code=\"ValidationException\" />{\" \"}\n        when validation fails. Default is <strong>false</strong>.\n      </p>\n      <p>\n        When set to true, the validator will execute all functions and only\n        throw an exception if validation has failed.\n      </p>\n      <h5 className=\"font-semibold text-sm my-4\">Example Usage</h5>\n      <CodeExample code={throwExample} />\n      <hr className=\"my-6\" />\n      <InlineCode\n        className=\"text-sm text-blue-600 bg-blue-100 font-semibold\"\n        code=\"AddBrokenRuleForException\"\n      />\n      <p className=\"mt-4\">\n        Indicates whether to add unhandled exceptions as broken rules when they\n        occur. Default is <strong>true</strong>.\n      </p>\n      <p>\n        When set to false, any unhandled exception will be thrown, regardless of\n        the value of ThrowWhenInvalid.\n      </p>\n      <h5 className=\"font-semibold text-sm my-4\">Example Usage</h5>\n      <CodeExample code={addExample} />\n    </Layout>\n  )\n}\n\nexport default ValidationOptions\n","import React, { FC } from \"react\"\nimport InlineCode from \"./inlineCode\"\nimport CSharp from \"./csharp\"\n\ntype FunctionProps = {\n  name: string\n  description: string\n  methods: string[]\n  brokenRule?: string\n}\n\nexport const ValidatorFunction: FC<FunctionProps> = ({\n  name,\n  description,\n  methods,\n  brokenRule,\n  children,\n}) => {\n  return (\n    <div className=\"mb-4\" id={name}>\n      <h2 className=\"font-semibold\">{name}</h2>\n      <p>{description}</p>\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Methods</h5>\n      {methods.map((method) => (\n        <>\n          <InlineCode className=\"text-sm font-semibold text-blue-600 bg-blue-100\">\n            {method}\n          </InlineCode>\n          <br />\n        </>\n      ))}\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Broken Rule</h5>\n      <p className=\"font-semibold font-mono text-sm text-red-600 inline px-1\">\n        {brokenRule}\n      </p>\n      <h5 className=\"font-semibold text-gray-800 text-sm mt-4\">\n        Example Usage\n      </h5>\n      {children}\n    </div>\n  )\n}\n\ntype CodeExampleProps = {\n  code: string\n  label?: string | JSX.Element\n}\n\nexport const CodeExample: FC<CodeExampleProps> = ({ label, code }) => (\n  <>\n    {label && <p className=\"text-gray-700 mb-0 pb-0 mt-4\">{label}</p>}\n    <CSharp code={code} />\n  </>\n)\n"],"sourceRoot":""}