{"version":3,"sources":["webpack:///./src/components/inlineCode.tsx","webpack:///./src/pages/building/keys-and-messages.tsx","webpack:///./src/components/validatorFuncs.tsx"],"names":["InlineCode","code","className","children","rest","classes","KeysAndMessages","label","ValidatorFunction","name","description","methods","brokenRule","id","map","method","CodeExample"],"mappings":"yKAwBeA,IAjByB,SAAC,GAKnC,IAJJC,EAII,EAJJA,KACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,SACGC,E,oIACC,oCACAC,EAAU,cAId,OAHIH,IACFG,EAAaA,EAAN,IAAiBH,GAGxB,wCAAMA,UAAWG,GAAaD,GAC3BH,GAAcE,K,kCCnBrB,wDA2DeG,UAnBS,kBACtB,kBAAC,IAAD,KACE,iDACA,sKAIA,iJAIA,wBAAIJ,UAAU,SACd,wBAAIA,UAAU,4CAAd,iBACA,kBAAC,IAAD,CAAaD,KAjDE,kWAiDgBM,MAAM,6BACrC,kBAAC,IAAD,CAAaN,KAtCE,6YAsCgBM,MAAM,iCACrC,kBAAC,IAAD,CAAaN,KA3BE,iaA2BgBM,MAAM,wC,iKC5C5BC,EAAuC,SAAC,GAM/C,IALJC,EAKI,EALJA,KACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,WACAT,EACI,EADJA,SAEA,OACE,yBAAKD,UAAU,OAAOW,GAAIJ,GACxB,wBAAIP,UAAU,iBAAiBO,GAC/B,2BAAIC,GACJ,wBAAIR,UAAU,4CAAd,WACCS,EAAQG,KAAI,SAACC,GAAD,OACX,oCACE,kBAAC,IAAD,CAAYb,UAAU,mDACnBa,GAEH,iCAGJ,wBAAIb,UAAU,4CAAd,eACA,uBAAGA,UAAU,4DACVU,GAEH,wBAAIV,UAAU,4CAAd,iBAGCC,IAUMa,EAAoC,SAAC,GAAD,IAAGT,EAAH,EAAGA,MAAON,EAAV,EAAUA,KAAV,OAC/C,oCACGM,GAAS,uBAAGL,UAAU,gCAAgCK,GACvD,kBAAC,IAAD,CAAQN,KAAMA","file":"component---src-pages-building-keys-and-messages-tsx-19700e306bfe23bbc902.js","sourcesContent":["import React, { FC } from \"react\"\n\ntype InlineCodeProps = {\n  code?: string\n  className?: string\n}\n\nconst InlineCode: FC<InlineCodeProps> = ({\n  code,\n  className,\n  children,\n  ...rest\n}) => {\n  let classes = \"inline-code\"\n  if (className) {\n    classes = `${classes} ${className}`\n  }\n  return (\n    <span className={classes} {...rest}>\n      {code ? code : children}\n    </span>\n  )\n}\n\nexport default InlineCode\n","import React from \"react\"\nimport Layout from \"../../components/layout\"\nimport { CodeExample } from \"../../components/validatorFuncs\"\n\nconst kmExample1 = `var validator = new ValidatorBuilder<Employee>()\n    .NotNull(key: \"NullEmployee\") // or .NotNull(\"NullEmployee\")\n    .Build();\n    \nvar result = validator.Validate(null);\nvar brokenRule = result.BrokenRules.First();\n\nConsole.WriteLine($\"[{rule.Rule}] {rule.Key}: {rule.Message}\");\n\n// output\n// [NotNull] NullEmployee: Value cannot be null.`\n\nconst kmExample2 = `var validator = new ValidatorBuilder<Employee>()\n    .Required(e => e.FirstName, message: \"Please provide first name.\")\n    .Build();\n    \nvar result = validator.Validate(new Employee { LastName = \"Smithers\" });\nvar brokenRule = result.BrokenRules.First();\n\nConsole.WriteLine($\"[{rule.Rule}] {rule.Key}: {rule.Message}\");\n\n// output\n// [Required] FirstName: Please provide first name.`\n\nconst kmExample3 = `var validator = new ValidatorBuilder<Employee>()\n    .Required(e => e.FirstName, \"EmployeeFirstName\", \"Please provide first name.\")\n    .Build();\n    \nvar result = validator.Validate(new Employee { LastName = \"Smithers\" });\nvar brokenRule = result.BrokenRules.First();\n\nConsole.WriteLine($\"[{rule.Rule}] {rule.Key}: {rule.Message}\");\n\n// output\n// [Required] EmployeeFirstName: Please provide first name.`\n\nconst KeysAndMessages = () => (\n  <Layout>\n    <h1>Keys and Messages</h1>\n    <p>\n      All built-in validation functions provide the ability to set the key of\n      the value being validated and also customise the error message.\n    </p>\n    <p>\n      Keys and messages are set via optional parameters and are passed to the\n      broken rules collection during validation.\n    </p>\n    <hr className=\"my-6\" />\n    <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Example Usage</h5>\n    <CodeExample code={kmExample1} label=\"Example setting the key.\" />\n    <CodeExample code={kmExample2} label=\"Example setting the message.\" />\n    <CodeExample code={kmExample3} label=\"Example setting key and message.\" />\n  </Layout>\n)\n\nexport default KeysAndMessages\n","import React, { FC } from \"react\"\nimport InlineCode from \"./inlineCode\"\nimport CSharp from \"./csharp\"\n\ntype FunctionProps = {\n  name: string\n  description: string\n  methods: string[]\n  brokenRule?: string\n}\n\nexport const ValidatorFunction: FC<FunctionProps> = ({\n  name,\n  description,\n  methods,\n  brokenRule,\n  children,\n}) => {\n  return (\n    <div className=\"mb-4\" id={name}>\n      <h2 className=\"font-semibold\">{name}</h2>\n      <p>{description}</p>\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Methods</h5>\n      {methods.map((method) => (\n        <>\n          <InlineCode className=\"text-sm font-semibold text-blue-600 bg-blue-100\">\n            {method}\n          </InlineCode>\n          <br />\n        </>\n      ))}\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Broken Rule</h5>\n      <p className=\"font-semibold font-mono text-sm text-red-600 inline px-1\">\n        {brokenRule}\n      </p>\n      <h5 className=\"font-semibold text-gray-800 text-sm mt-4\">\n        Example Usage\n      </h5>\n      {children}\n    </div>\n  )\n}\n\ntype CodeExampleProps = {\n  code: string\n  label?: string | JSX.Element\n}\n\nexport const CodeExample: FC<CodeExampleProps> = ({ label, code }) => (\n  <>\n    {label && <p className=\"text-gray-700 mb-0 pb-0 mt-4\">{label}</p>}\n    <CSharp code={code} />\n  </>\n)\n"],"sourceRoot":""}