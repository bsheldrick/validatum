{"version":3,"sources":["webpack:///./src/components/inlineCode.tsx","webpack:///./src/pages/building/including-validators.tsx","webpack:///./src/components/validatorFuncs.tsx"],"names":["InlineCode","code","className","children","rest","classes","IncludingValidators","label","ValidatorFunction","name","description","methods","brokenRule","id","map","method","CodeExample"],"mappings":"wKAwBeA,IAjByB,SAAC,GAKnC,IAJJC,EAII,EAJJA,KACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,SACGC,E,oIACC,oCACAC,EAAU,cAId,OAHIH,IACFG,EAAaA,EAAN,IAAiBH,GAGxB,wCAAMA,UAAWG,GAAaD,GAC3BH,GAAcE,K,kCCnBrB,oEAoEeG,UAjCf,WACE,OACE,kBAAC,IAAD,KACE,oDACA,wKAKA,wBAAIJ,UAAU,SACd,wBAAIA,UAAU,4CAAd,iBAGA,kBAAC,IAAD,CACEK,MAAM,4BACNN,KA7C4B,0OA+C9B,kBAAC,IAAD,CACEM,MAAM,6BACNN,KAvCgC,wRAyClC,kBAAC,IAAD,CACEM,MACE,6CACQ,kBAAC,IAAD,YADR,cAIFN,KArC2B,uS,iKCdtBO,EAAuC,SAAC,GAM/C,IALJC,EAKI,EALJA,KACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,WACAT,EACI,EADJA,SAEA,OACE,yBAAKD,UAAU,OAAOW,GAAIJ,GACxB,wBAAIP,UAAU,iBAAiBO,GAC/B,2BAAIC,GACJ,wBAAIR,UAAU,4CAAd,WACCS,EAAQG,KAAI,SAACC,GAAD,OACX,oCACE,kBAAC,IAAD,CAAYb,UAAU,mDACnBa,GAEH,iCAGJ,wBAAIb,UAAU,4CAAd,eACA,uBAAGA,UAAU,4DACVU,GAEH,wBAAIV,UAAU,4CAAd,iBAGCC,IAUMa,EAAoC,SAAC,GAAD,IAAGT,EAAH,EAAGA,MAAON,EAAV,EAAUA,KAAV,OAC/C,oCACGM,GAAS,uBAAGL,UAAU,gCAAgCK,GACvD,kBAAC,IAAD,CAAQN,KAAMA","file":"component---src-pages-building-including-validators-tsx-49473c81cc89e8589d65.js","sourcesContent":["import React, { FC } from \"react\"\n\ntype InlineCodeProps = {\n  code?: string\n  className?: string\n}\n\nconst InlineCode: FC<InlineCodeProps> = ({\n  code,\n  className,\n  children,\n  ...rest\n}) => {\n  let classes = \"inline-code\"\n  if (className) {\n    classes = `${classes} ${className}`\n  }\n  return (\n    <span className={classes} {...rest}>\n      {code ? code : children}\n    </span>\n  )\n}\n\nexport default InlineCode\n","import React, { ReactElement } from \"react\"\nimport InlineCode from \"../../components/inlineCode\"\nimport Layout from \"../../components/layout\"\nimport { CodeExample } from \"../../components/validatorFuncs\"\n\nconst includeValidatorTypeExample = `var rangeValidator = new ValidatorBuilder<int>()\n    .Range(18, 52)\n    .Build();\n\nvar numberValidator = new ValidatorBuilder<int>()\n    .Validator(rangeValidator)\n    .Build();\n\nvar result = numberValidator.Validate(42);`\n\nconst includeValidatorSelectorExample = `var ageValidator = new ValidatorBuilder<int>()\n    .Range(18, 52)\n    .Build();\n\nvar personValidator = new ValidatorBuilder<Person>()\n    .Validator(p => p.Age, ageValidator)\n    .Build();\n\nvar result = personValidator.Validate(new Person { Name = \"Rob\", Age = 28 });`\n\nconst includeValidatorForExample = `var ageValidator = new ValidatorBuilder<int>()\n    .Range(18, 52)\n    .Build();\n\nvar personValidator = new ValidatorBuilder<Person>()\n    .For(p => p.Age, v => v.Validator(ageValidator))\n    .Build();\n\nvar result = personValidator.Validate(new Person { Name = \"Jez\", Age = 28 });`\n\nfunction IncludingValidators(): ReactElement {\n  return (\n    <Layout>\n      <h1>Including Validators</h1>\n      <p>\n        Validatum allows for multiple validators to be used with other\n        validators. This promotes the reuse of validators targeting the same\n        type.\n      </p>\n      <hr className=\"my-6\" />\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">\n        Example Usage\n      </h5>\n      <CodeExample\n        label=\"Using same type instance.\"\n        code={includeValidatorTypeExample}\n      />\n      <CodeExample\n        label=\"Using selector expression.\"\n        code={includeValidatorSelectorExample}\n      />\n      <CodeExample\n        label={\n          <>\n            Using <InlineCode>For</InlineCode> function.\n          </>\n        }\n        code={includeValidatorForExample}\n      />\n    </Layout>\n  )\n}\n\nexport default IncludingValidators\n","import React, { FC } from \"react\"\nimport InlineCode from \"./inlineCode\"\nimport CSharp from \"./csharp\"\n\ntype FunctionProps = {\n  name: string\n  description: string\n  methods: (string | JSX.Element)[]\n  brokenRule?: string\n}\n\nexport const ValidatorFunction: FC<FunctionProps> = ({\n  name,\n  description,\n  methods,\n  brokenRule,\n  children,\n}) => {\n  return (\n    <div className=\"mb-4\" id={name}>\n      <h2 className=\"font-semibold\">{name}</h2>\n      <p>{description}</p>\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Methods</h5>\n      {methods.map((method) => (\n        <>\n          <InlineCode className=\"text-sm font-semibold text-blue-600 bg-blue-100\">\n            {method}\n          </InlineCode>\n          <br />\n        </>\n      ))}\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Broken Rule</h5>\n      <p className=\"font-semibold font-mono text-sm text-red-600 inline px-1\">\n        {brokenRule}\n      </p>\n      <h5 className=\"font-semibold text-gray-800 text-sm mt-4\">\n        Example Usage\n      </h5>\n      {children}\n    </div>\n  )\n}\n\ntype CodeExampleProps = {\n  code: string\n  label?: string | JSX.Element\n}\n\nexport const CodeExample: FC<CodeExampleProps> = ({ label, code }) => (\n  <>\n    {label && <p className=\"text-gray-700 mb-0 pb-0 mt-4\">{label}</p>}\n    <CSharp code={code} />\n  </>\n)\n"],"sourceRoot":""}