{"version":3,"sources":["webpack:///./src/components/inlineCode.tsx","webpack:///./src/pages/building/validator-builder.tsx","webpack:///./src/components/validatorFuncs.tsx"],"names":["InlineCode","code","className","children","rest","classes","ValidatorBuilder","title","description","ValidatorBuilderMethod","methods","returns","to","map","method","ValidatorFunction","name","brokenRule","id","CodeExample","label"],"mappings":"yKAwBeA,IAjByB,SAAC,GAKnC,IAJJC,EAII,EAJJA,KACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,SACGC,E,oIACC,oCACAC,EAAU,cAId,OAHIH,IACFG,EAAaA,EAAN,IAAiBH,GAGxB,wCAAMA,UAAWG,GAAaD,GAC3BH,GAAcE,K,kCCnBrB,gFA+FeG,UAxEf,WACE,OACE,kBAAC,IAAD,CACEC,MAAM,gCACNC,YAAY,uCAEZ,6DACA,yEAC8C,IAC5C,kBAAC,IAAD,CAAYP,KAAK,wBAFnB,wEAG6C,IAC3C,kBAAC,IAAD,CAAYA,KAAK,iBAJnB,2EAOA,wBAAIC,UAAU,SACd,kCACM,kBAAC,IAAD,CAAYD,KAAK,wBADvB,mDAEwB,kBAAC,IAAD,CAAYA,KAAK,yBAA0B,IAFnE,cAKA,uBAAGC,UAAU,QAAb,+CAEE,wBAAIA,UAAU,sCACZ,oEACwC,IACtC,kBAAC,IAAD,eAFF,YAIA,wCACW,kBAAC,IAAD,CAAYD,KAAK,iBAD5B,sBACiE,IAC/D,kBAAC,IAAD,gBAFF,cAMJ,wBAAIC,UAAU,SACd,wBAAIA,UAAU,QAAd,WACA,kBAACO,EAAD,CACEC,QAAS,CAAC,kDACVC,QAAQ,wBAER,uBAAGT,UAAU,QAAb,mEAGA,wBAAIA,UAAU,4CAAd,iBAGA,kBAAC,IAAD,CAAaD,KA9DD,gQAgEd,wBAAIC,UAAU,SACd,kBAACO,EAAD,CACEC,QAAS,CAAC,8BACVC,QAAQ,gBAER,uBAAGT,UAAU,QAAb,mCACkC,kBAAC,IAAD,CAAYD,KAAK,iBAAkB,IADrE,aAIA,wBAAIC,UAAU,4CAAd,iBAGA,kBAAC,IAAD,CAAaD,KAlED,kMAoEd,wBAAIC,UAAU,SACd,wBAAIA,UAAU,QAAd,YACA,wBAAIA,UAAU,QACZ,4BACE,kBAAC,OAAD,CAAMU,GAAG,0BAAT,6BAcV,IAAMH,EAA0D,SAAC,GAAD,IAC9DC,EAD8D,EAC9DA,QACAC,EAF8D,EAE9DA,QACAR,EAH8D,EAG9DA,SAH8D,OAK9D,yBAAKD,UAAU,QACb,wBAAIA,UAAU,iBACXQ,EAAQG,KAAI,SAACC,GAAD,OACX,oCACE,kBAAC,IAAD,CAAYZ,UAAU,6BACnBY,GAEH,kCAIN,wBAAIZ,UAAU,4CAAd,WACA,kBAAC,IAAD,CAAYA,UAAU,mDACnBS,GAEFR,K,iKC/GQY,EAAuC,SAAC,GAM/C,IALJC,EAKI,EALJA,KACAR,EAII,EAJJA,YACAE,EAGI,EAHJA,QACAO,EAEI,EAFJA,WACAd,EACI,EADJA,SAEA,OACE,yBAAKD,UAAU,OAAOgB,GAAIF,GACxB,wBAAId,UAAU,iBAAiBc,GAC/B,2BAAIR,GACJ,wBAAIN,UAAU,4CAAd,WACCQ,EAAQG,KAAI,SAACC,GAAD,OACX,oCACE,kBAAC,IAAD,CAAYZ,UAAU,mDACnBY,GAEH,iCAGJ,wBAAIZ,UAAU,4CAAd,eACA,uBAAGA,UAAU,4DACVe,GAEH,wBAAIf,UAAU,4CAAd,iBAGCC,IAUMgB,EAAoC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOnB,EAAV,EAAUA,KAAV,OAC/C,oCACGmB,GAAS,uBAAGlB,UAAU,gCAAgCkB,GACvD,kBAAC,IAAD,CAAQnB,KAAMA","file":"component---src-pages-building-validator-builder-tsx-205fd056dc8c5ec575ec.js","sourcesContent":["import React, { FC } from \"react\"\n\ntype InlineCodeProps = {\n  code?: string\n  className?: string\n}\n\nconst InlineCode: FC<InlineCodeProps> = ({\n  code,\n  className,\n  children,\n  ...rest\n}) => {\n  let classes = \"inline-code\"\n  if (className) {\n    classes = `${classes} ${className}`\n  }\n  return (\n    <span className={classes} {...rest}>\n      {code ? code : children}\n    </span>\n  )\n}\n\nexport default InlineCode\n","import { Link } from \"gatsby\"\nimport React, { FC, ReactElement } from \"react\"\nimport InlineCode from \"../../components/inlineCode\"\nimport Layout from \"../../components/layout\"\nimport { CodeExample } from \"../../components/validatorFuncs\"\n\nconst withExample = `var builder = new ValidatorBuilder<int>()\n    .With(ctx => \n    {\n        // perform validation\n        if (context.Value == 13)\n        {\n            context.AddBrokenRule(\"NotThirteen\", \"Unlucky\", \"Value cannot equal 13\");\n        }\n    });`\n\nconst buildMethod = `var validator = new ValidatorBuilder<string>()\n    .Required()\n    .Build(); // builds a Validator<string> instance\n    \n// use the validator\nvar result = validator.Validate(\"hello\");`\n\nfunction ValidatorBuilder(): ReactElement {\n  return (\n    <Layout\n      title=\"The ValidatorBuilder<T> class\"\n      description=\"If you build it they will validate.\"\n    >\n      <h1>The ValidatorBuilder&lt;T&gt; Class</h1>\n      <p>\n        In Validatum all validation begins with the{\" \"}\n        <InlineCode code=\"ValidatorBuilder<T>\" /> class. You must create an\n        instance of this class in order to build a{\" \"}\n        <InlineCode code=\"Validator<T>\" /> to validate values. Any type can be\n        used to create a ValidatorBuilder.\n      </p>\n      <hr className=\"my-6\" />\n      <p>\n        The <InlineCode code=\"ValidatorBuilder<T>\" /> class provides a default\n        implementation of the <InlineCode code=\"IValidatorBuilder<T>\" />{\" \"}\n        interface.\n      </p>\n      <p className=\"mt-4\">\n        This class provides two important functions:\n        <ol className=\"list-decimal list-inside mt-2 ml-2\">\n          <li>\n            Adding validation functions using the{\" \"}\n            <InlineCode>With()</InlineCode> method.\n          </li>\n          <li>\n            Create a <InlineCode code=\"Validator<T>\" /> instance using the{\" \"}\n            <InlineCode>Build()</InlineCode> method.\n          </li>\n        </ol>\n      </p>\n      <hr className=\"my-6\" />\n      <h2 className=\"my-8\">Methods</h2>\n      <ValidatorBuilderMethod\n        methods={[\"With<T>(ValidatorDelegate<T> func) (extension)\"]}\n        returns=\"IValidatorBuilder<T>\"\n      >\n        <p className=\"mt-4\">\n          This method is used to add validation functions to the builder.\n        </p>\n        <h5 className=\"font-semibold text-gray-800 text-sm mt-4\">\n          Example Usage\n        </h5>\n        <CodeExample code={withExample} />\n      </ValidatorBuilderMethod>\n      <hr className=\"my-6\" />\n      <ValidatorBuilderMethod\n        methods={[\"Build(string label = null)\"]}\n        returns=\"Validator<T>\"\n      >\n        <p className=\"mt-4\">\n          This method is used to create a <InlineCode code=\"Validator<T>\" />{\" \"}\n          instance.\n        </p>\n        <h5 className=\"font-semibold text-gray-800 text-sm mt-4\">\n          Example Usage\n        </h5>\n        <CodeExample code={buildMethod} />\n      </ValidatorBuilderMethod>\n      <hr className=\"my-6\" />\n      <h2 className=\"mt-8\">See also</h2>\n      <ul className=\"list\">\n        <li>\n          <Link to=\"/validation/execution/\">Executing a Validator</Link>\n        </li>\n      </ul>\n    </Layout>\n  )\n}\n\nexport default ValidatorBuilder\n\ntype ValidatorBuilderMethodProps = {\n  methods: string[]\n  returns: string\n}\n\nconst ValidatorBuilderMethod: FC<ValidatorBuilderMethodProps> = ({\n  methods,\n  returns,\n  children,\n}) => (\n  <div className=\"mb-4\">\n    <h3 className=\"font-semibold\">\n      {methods.map((method) => (\n        <>\n          <InlineCode className=\"text-blue-600 bg-blue-100\">\n            {method}\n          </InlineCode>\n          <br />\n        </>\n      ))}\n    </h3>\n    <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Returns</h5>\n    <InlineCode className=\"text-sm text-blue-600 bg-blue-100 font-semibold\">\n      {returns}\n    </InlineCode>\n    {children}\n  </div>\n)\n","import React, { FC } from \"react\"\nimport InlineCode from \"./inlineCode\"\nimport CSharp from \"./csharp\"\n\ntype FunctionProps = {\n  name: string\n  description: string\n  methods: (string | JSX.Element)[]\n  brokenRule?: string\n}\n\nexport const ValidatorFunction: FC<FunctionProps> = ({\n  name,\n  description,\n  methods,\n  brokenRule,\n  children,\n}) => {\n  return (\n    <div className=\"mb-4\" id={name}>\n      <h2 className=\"font-semibold\">{name}</h2>\n      <p>{description}</p>\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Methods</h5>\n      {methods.map((method) => (\n        <>\n          <InlineCode className=\"text-sm font-semibold text-blue-600 bg-blue-100\">\n            {method}\n          </InlineCode>\n          <br />\n        </>\n      ))}\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Broken Rule</h5>\n      <p className=\"font-semibold font-mono text-sm text-red-600 inline px-1\">\n        {brokenRule}\n      </p>\n      <h5 className=\"font-semibold text-gray-800 text-sm mt-4\">\n        Example Usage\n      </h5>\n      {children}\n    </div>\n  )\n}\n\ntype CodeExampleProps = {\n  code: string\n  label?: string | JSX.Element\n}\n\nexport const CodeExample: FC<CodeExampleProps> = ({ label, code }) => (\n  <>\n    {label && <p className=\"text-gray-700 mb-0 pb-0 mt-4\">{label}</p>}\n    <CSharp code={code} />\n  </>\n)\n"],"sourceRoot":""}