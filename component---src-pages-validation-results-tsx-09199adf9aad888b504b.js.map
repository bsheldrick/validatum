{"version":3,"sources":["webpack:///./src/components/inlineCode.tsx","webpack:///./src/pages/validation/results.tsx","webpack:///./src/components/validatorFuncs.tsx"],"names":["InlineCode","code","className","children","rest","classes","ValidationResults","ValidatorFunction","name","description","methods","brokenRule","id","map","method","CodeExample","label"],"mappings":"yKAwBeA,IAjByB,SAAC,GAKnC,IAJJC,EAII,EAJJA,KACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,SACGC,E,oIACC,oCACAC,EAAU,cAId,OAHIH,IACFG,EAAaA,EAAN,IAAiBH,GAGxB,wCAAMA,UAAWG,GAAaD,GAC3BH,GAAcE,K,kCCnBrB,oEA6EeG,UApCf,WACE,OACE,kBAAC,IAAD,KACE,kDACA,8DACkC,kBAAC,IAAD,CAAYL,KAAK,eADnD,wBAGE,kBAAC,IAAD,CAAYA,KAAK,qBAHnB,cAKA,kCACM,kBAAC,IAAD,CAAYA,KAAK,qBADvB,oDAIA,wBAAIC,UAAU,SACd,wBAAIA,UAAU,8BAAd,cACA,kBAAC,IAAD,CACEA,UAAU,kDACVD,KAAK,YAEP,uBAAGC,UAAU,QAAb,0CACA,wBAAIA,UAAU,8BAAd,iBACA,kBAAC,IAAD,CAAaD,KAzDI,kTA0DjB,wBAAIC,UAAU,SACd,kBAAC,IAAD,CACEA,UAAU,kDACVD,KAAK,gBAEP,uBAAGC,UAAU,QAAb,2BAC0B,kBAAC,IAAD,CAAYD,KAAK,eAD3C,WAGA,wBAAIC,UAAU,8BAAd,iBACA,kBAAC,IAAD,CAAaD,KAlDQ,ugB,iKCXdM,EAAuC,SAAC,GAM/C,IALJC,EAKI,EALJA,KACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,WACAR,EACI,EADJA,SAEA,OACE,yBAAKD,UAAU,OAAOU,GAAIJ,GACxB,wBAAIN,UAAU,iBAAiBM,GAC/B,2BAAIC,GACJ,wBAAIP,UAAU,4CAAd,WACCQ,EAAQG,KAAI,SAACC,GAAD,OACX,oCACE,kBAAC,IAAD,CAAYZ,UAAU,mDACnBY,GAEH,iCAGJ,wBAAIZ,UAAU,4CAAd,eACA,uBAAGA,UAAU,4DACVS,GAEH,wBAAIT,UAAU,4CAAd,iBAGCC,IAUMY,EAAoC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOf,EAAV,EAAUA,KAAV,OAC/C,oCACGe,GAAS,uBAAGd,UAAU,gCAAgCc,GACvD,kBAAC,IAAD,CAAQf,KAAMA","file":"component---src-pages-validation-results-tsx-09199adf9aad888b504b.js","sourcesContent":["import React, { FC } from \"react\"\n\ntype InlineCodeProps = {\n  code?: string\n  className?: string\n}\n\nconst InlineCode: FC<InlineCodeProps> = ({\n  code,\n  className,\n  children,\n  ...rest\n}) => {\n  let classes = \"inline-code\"\n  if (className) {\n    classes = `${classes} ${className}`\n  }\n  return (\n    <span className={classes} {...rest}>\n      {code ? code : children}\n    </span>\n  )\n}\n\nexport default InlineCode\n","import React, { ReactElement } from \"react\"\nimport InlineCode from \"../../components/inlineCode\"\nimport Layout from \"../../components/layout\"\nimport { CodeExample } from \"../../components/validatorFuncs\"\n\nconst isValidExample = `var validator = new ValidatorBuilder<int>()\n    .Range(50, 100)\n    .Build();\n    \n// get the validation result\nvar result = validator.Validate(49);\n\n// check valid status\nif (result.IsValid)\n{\n    Console.WriteLine(\"All good.\");\n}\nelse\n{\n    Console.WriteLine(\"Something is amiss!\");\n}`\n\nconst brokenRulesExample = `var validator = new ValidatorBuilder<string>()\n    .StartsWith(\"Alexander\")\n    .Contains(\"the\")\n    .EndsWith(\"Great\")\n    .Build();\n    \n// get the validation result\nvar result = validator.Validate(\"Homer the Lazy\");\n\n// check the broken rules collection\nforeach (var rule in result.BrokenRules)\n{\n    Console.WriteLine($\"[{rule.Rule}] {rule.Key}: {rule.Message}\");\n}\n\n// output\n// [StartsWith] String: Value must start with 'Alexander'.\n// [EndsWith] String: Value must end with 'Great'.`\n\nfunction ValidationResults(): ReactElement {\n  return (\n    <Layout>\n      <h1>Validation Results</h1>\n      <p>\n        After executing a validator the <InlineCode code=\"Validate()\" /> method\n        will return a\n        <InlineCode code=\"ValidationResult\" /> instance.\n      </p>\n      <p>\n        The <InlineCode code=\"ValidationResult\" /> class encapsulates the broken\n        rules collection.\n      </p>\n      <hr className=\"my-6\" />\n      <h5 className=\"font-semibold text-sm mb-4\">Properties</h5>\n      <InlineCode\n        className=\"text-sm text-blue-600 bg-blue-100 font-semibold\"\n        code=\"IsValid\"\n      />\n      <p className=\"mt-4\">Indicates whether the result is valid.</p>\n      <h5 className=\"font-semibold text-sm my-4\">Example Usage</h5>\n      <CodeExample code={isValidExample} />\n      <hr className=\"my-6\" />\n      <InlineCode\n        className=\"text-sm text-blue-600 bg-blue-100 font-semibold\"\n        code=\"BrokenRules\"\n      />\n      <p className=\"mt-4\">\n        A collection containing <InlineCode code=\"BrokenRule\" /> items.\n      </p>\n      <h5 className=\"font-semibold text-sm my-4\">Example Usage</h5>\n      <CodeExample code={brokenRulesExample} />\n    </Layout>\n  )\n}\n\nexport default ValidationResults\n","import React, { FC } from \"react\"\nimport InlineCode from \"./inlineCode\"\nimport CSharp from \"./csharp\"\n\ntype FunctionProps = {\n  name: string\n  description: string\n  methods: string[]\n  brokenRule?: string\n}\n\nexport const ValidatorFunction: FC<FunctionProps> = ({\n  name,\n  description,\n  methods,\n  brokenRule,\n  children,\n}) => {\n  return (\n    <div className=\"mb-4\" id={name}>\n      <h2 className=\"font-semibold\">{name}</h2>\n      <p>{description}</p>\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Methods</h5>\n      {methods.map((method) => (\n        <>\n          <InlineCode className=\"text-sm font-semibold text-blue-600 bg-blue-100\">\n            {method}\n          </InlineCode>\n          <br />\n        </>\n      ))}\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Broken Rule</h5>\n      <p className=\"font-semibold font-mono text-sm text-red-600 inline px-1\">\n        {brokenRule}\n      </p>\n      <h5 className=\"font-semibold text-gray-800 text-sm mt-4\">\n        Example Usage\n      </h5>\n      {children}\n    </div>\n  )\n}\n\ntype CodeExampleProps = {\n  code: string\n  label?: string | JSX.Element\n}\n\nexport const CodeExample: FC<CodeExampleProps> = ({ label, code }) => (\n  <>\n    {label && <p className=\"text-gray-700 mb-0 pb-0 mt-4\">{label}</p>}\n    <CSharp code={code} />\n  </>\n)\n"],"sourceRoot":""}