{"version":3,"sources":["webpack:///./src/pages/functions/codeExamples.ts","webpack:///./src/components/inlineCode.tsx","webpack:///./src/pages/functions/collection.tsx","webpack:///./src/components/validatorFuncs.tsx"],"names":["Examples","Common","NotNull","Example1","Example2","Example3","Null","Equal","NotEqual","Comparison","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","Range","Compare","String","NotEmpty","Empty","Regex","Example4","StartsWith","EndsWith","Contains","Length","MinLength","MaxLength","Required","Email","Boolean","True","False","Collection","Count","MinCount","MaxCount","InlineCode","children","className","classes","CollectionFunctions","title","description","map","func","to","name","methods","brokenRule","label","code","ValidatorFunction","id","method","CodeExample"],"mappings":"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","file":"component---src-pages-functions-collection-tsx-a6266746953219b1f591.js","sourcesContent":["const Examples = {\n  Common: {\n    NotNull: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .NotNull()\n    .Build();\n\nvar result = validator.Validate(null);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .NotNull(e => e.FirstName)\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Homer\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.NotNull())\n    .Build();\n\nvar result = validator.Validate(new Employee { LastName = \"Simpson\" });`,\n    },\n    Null: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .Null()\n    .Build();\n\nvar result = validator.Validate(null);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Null(e => e.FirstName)\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Homer\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.Null())\n    .Build();\n\nvar result = validator.Validate(new Employee { LastName = \"Simpson\" });`,\n    },\n    Equal: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .Equal(\"Smithers\")\n    .Build();\n\nvar result = validator.Validate(\"Smithers\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Equal(e => e.FirstName, \"Homer\")\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Homer\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.LastName, v => v.Equal(\"Smithers\"))\n    .Build();\n    \nvar result = validator.Validate(new Employee { LastName = \"Simpson\" });`,\n    },\n    NotEqual: {\n      Example1: `var validator = new ValidatorBuilder<int>()\n    .NotEqual(17)\n    .Build();\n\nvar result = validator.Validate(18);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .NotEqual(e => e.Age, 17)\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 18 });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Age, v => v.NotEqual(17))\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 18 });`,\n    },\n  },\n  Comparison: {\n    GreaterThan: {\n      Example1: `var validator = new ValidatorBuilder<int>()\n    .GreaterThan(18)\n    .Build();\n  \nvar result = validator.Validate(16);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .GreaterThan(e => e.Age, 18)\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 20 });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Age, v => v.GreaterThan(18))\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 17 });`,\n    },\n    GreaterThanOrEqual: {\n      Example1: `var validator = new ValidatorBuilder<int>()\n    .GreaterThanOrEqual(18)\n    .Build();\n  \nvar result = validator.Validate(16);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .GreaterThanOrEqual(e => e.Age, 18)\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 20 });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Age, v => v.GreaterThanOrEqual(18))\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 17 });`,\n    },\n    LessThan: {\n      Example1: `var validator = new ValidatorBuilder<int>()\n    .LessThan(18)\n    .Build();\n  \nvar result = validator.Validate(16);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .LessThan(e => e.Age, 18)\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 20 });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Age, v => v.LessThan(18))\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 17 });`,\n    },\n    LessThanOrEqual: {\n      Example1: `var validator = new ValidatorBuilder<int>()\n    .LessThanOrEqual(18)\n    .Build();\n  \nvar result = validator.Validate(16);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .LessThanOrEqual(e => e.Age, 18)\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 20 });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Age, v => v.LessThanOrEqual(18))\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 17 });`,\n    },\n    Range: {\n      Example1: `var validator = new ValidatorBuilder<int>()\n    .Range(18, 30)\n    .Build();\n  \nvar result = validator.Validate(24);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Range(e => e.Age, 18, 30)\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 20 });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Age, v => v.Range(18, 30))\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 17 });`,\n    },\n    Compare: {\n      Example1: `var validator = new ValidatorBuilder<LoginModel>()\n    .Compare(m => m.Password, m => m.PasswordConfirm)\n    .Build();\n\nvar result = validator.Validate(new LoginModel \n    { \n        Password = \"StrongP@ssw0rd\",\n        PasswordConfirm = \"StrongPassw0rd\"\n    });`,\n    },\n  },\n  String: {\n    NotEmpty: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .NotEmpty()\n    .Build();\n\nvar result = validator.Validate(null);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .NotEmpty(e => e.FirstName)\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Homer\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.NotEmpty())\n    .Build();\n\nvar result = validator.Validate(new Employee { LastName = \"Simpson\" });`,\n    },\n    Empty: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .Empty()\n    .Build();\n\nvar result = validator.Validate(\"\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Empty(e => e.FirstName)\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Homer\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.Empty())\n    .Build();\n\nvar result = validator.Validate(new Employee { LastName = \"Simpson\" });`,\n    },\n    Regex: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .Regex(\"^[0-9]*$\")\n    .Build();\n\nvar result = validator.Validate(\"12345\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Regex(e => e.FirstName, \"^[0-9]*$\")\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Six\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.Regex(\"^[0-9]*$\"))\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"7 of 9\" });`,\n\n      Example4: `var validator = new ValidatorBuilder<string>()\n    .Regex(\"^[a-z]*$\", RegexOptions.IgnoreCase)\n    .Build();\n\nvar result = validator.Validate(\"ABC\");`,\n    },\n    StartsWith: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .StartsWith(\"fun\")\n    .Build();\n\nvar result = validator.Validate(\"function\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .StartsWith(e => e.FirstName, \"Jo\")\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Homer\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.StartsWith(\"Pet\"))\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Peter\" });`,\n    },\n    EndsWith: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .EndsWith(\"on\")\n    .Build();\n\nvar result = validator.Validate(\"function\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .EndsWith(e => e.FirstName, \"son\")\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Jason\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.EndsWith(\"art\"))\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Lisa\" });`,\n    },\n    Contains: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .Contains(\"tio\")\n    .Build();\n\nvar result = validator.Validate(\"function\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Contains(e => e.FirstName, \"aso\")\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Jason\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.Contains(\"holo\"))\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Bartholomew\" });`,\n    },\n    Length: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .Length(3, 8)\n    .Build();\n\nvar result = validator.Validate(\"function\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Length(e => e.FirstName, 1, 15)\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Jason\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.Length(1, 10))\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Bartholomew\" });`,\n    },\n    MinLength: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .MinLength(3)\n    .Build();\n\nvar result = validator.Validate(\"stop\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .MinLength(e => e.Role, 5)\n    .Build();\n\nvar result = validator.Validate(new Employee { Role = \"Admin\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.MinLength(4))\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Bart\" });`,\n    },\n    MaxLength: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .MaxLength(6)\n    .Build();\n\nvar result = validator.Validate(\"validate\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .MaxLength(e => e.Lastname, 12)\n    .Build();\n\nvar result = validator.Validate(new Employee { LastName = \"Smithers\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.MaxLength(4))\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"El Barto\" });`,\n    },\n    Required: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .Required()\n    .Build();\n\nvar result = validator.Validate(null);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Required(e => e.FirstName)\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.Required())\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"   \" });`,\n    },\n    Email: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .Email()\n    .Build();\n\nvar result = validator.Validate(\"bart@example.com\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Email(e => e.Email)\n    .Build();\n\nvar result = validator.Validate(new Employee { Email = \"invalid[at]email.com\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Email, v => v.Email())\n    .Build();\n\nvar result = validator.Validate(new Employee { Email = \"homer@gmail.com\" });`,\n    },\n  },\n  Boolean: {\n    True: {\n      Example1: `var validator = new ValidatorBuilder<bool>()\n    .True()\n    .Build();\n\nvar result = validator.Validate(1 == 1);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .True(e => e.Active)\n    .Build();\n\nvar result = validator.Validate(new Employee { Active = false });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Active, v => v.True())\n    .Build();\n\nvar result = validator.Validate(new Employee { Active = true });`,\n    },\n    False: {\n      Example1: `var validator = new ValidatorBuilder<bool>()\n    .False()\n    .Build();\n\nvar result = validator.Validate(1 == 1);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .False(e => e.Active)\n    .Build();\n\nvar result = validator.Validate(new Employee { Active = false });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Active, v => v.False())\n    .Build();\n\nvar result = validator.Validate(new Employee { Active = true });`,\n    },\n  },\n  Collection: {\n    Count: {\n      Example1: `var validator = new ValidatorBuilder<IEnumerable<string>>()\n    .Count(2)\n    .Build();\n\nvar result = validator.Validate(new[] { \"One\", \"Two\" });`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Count(e => e.Skills, 2)\n    .Build();\n\nvar result = validator.Validate(new Employee { Skills = new[] { \"Cromulent\" } });`,\n\n  Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Skills, v => v.Count(1))\n    .Build();\n\nvar result = validator.Validate(new Employee { Skills = new[] { \"Vandalism\" } });`,\n    },\n    MinCount: {\n      Example1: `var validator = new ValidatorBuilder<IEnumerable<string>>()\n    .MinCount(2)\n    .Build();\n\nvar result = validator.Validate(new[] { \"One\" });`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .MinCount(e => e.Skills, 2)\n    .Build();\n\nvar result = validator.Validate(new Employee { Skills = new[] { \"Cromulent\" } });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Skills, v => v.MinCount(1))\n    .Build();\n\nvar result = validator.Validate(new Employee { Skills = new[] { \"Vandalism\" } });`,\n    },\n    MaxCount: {\n      Example1: `var validator = new ValidatorBuilder<IEnumerable<string>>()\n    .MaxCount(2)\n    .Build();\n\nvar result = validator.Validate(new[] { \"One\" });`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .MaxCount(e => e.Skills, 2)\n    .Build();\n\nvar result = validator.Validate(new Employee { Skills = new[] { \"Cromulent\" } });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Skills, v => v.MaxCount(1))\n    .Build();\n\nvar result = validator.Validate(new Employee { Skills = new[] { \"Vandalism\" } });`,\n    },\n    Contains: {\n      Example1: `var validator = new ValidatorBuilder<IEnumerable<string>>()\n    .Contains(\"Two\")\n    .Build();\n\nvar result = validator.Validate(new[] { \"One\", \"Two\", \"Three\" });`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Contains(e => e.Skills, \"Cromulent\")\n    .Build();\n\nvar result = validator.Validate(new Employee { Skills = new[] { \"Cromulent\" } });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Skills, v => v.Contains(\"Chill\"))\n    .Build();\n\nvar result = validator.Validate(new Employee { Skills = new[] { \"Wisdom\" } });`,\n    }\n  },\n}\n\nexport default Examples\n","import React, { ReactElement } from \"react\"\n\nfunction InlineCode({ children, className }: any): ReactElement {\n  let classes = \"inline-code\"\n  if (className) {\n    classes = `${classes} ${className}`\n  }\n  return <span className={classes}>{children}</span>\n}\n\nexport default InlineCode\n","import React, { ReactElement } from \"react\"\nimport { Link } from \"gatsby\"\nimport Layout from \"../../components/layout\"\nimport { ValidatorFunction, CodeExample } from \"../../components/validatorFuncs\"\nimport InlineCode from \"../../components/inlineCode\"\nimport Examples from \"./codeExamples\"\n\nfunction CollectionFunctions(): ReactElement {\n  return (\n    <Layout\n      title=\"Collection functions\"\n      description=\"Validation functions for use on collections\"\n    >\n      <h1>Collection Functions</h1>\n      <p>\n        <ul className=\"list\">\n          {[\n            \"Count\",\n            \"MinCount\",\n            \"MaxCount\",\n            \"Contains\"\n          ].map((func) => (\n            <li>\n              <Link to={`/functions/collection/#${func}`}>{func}</Link>\n            </li>\n          ))}\n        </ul>\n      </p>\n      <hr className=\"my-6\" />\n      <ValidatorFunction\n        name=\"Count\"\n        description=\"Ensures the collection has a specified item count.\"\n        methods={[\n          `Count<T>(int count)`,\n          `Count<T, P>(Expression<Func<T, IEnumerable<P>>> selector, int count)`,\n        ]}\n        brokenRule=\"Collection count must equal {count}.\"\n      >\n        <CodeExample\n          label=\"Using type instance.\"\n          code={Examples.Collection.Count.Example1}\n        />\n        <CodeExample\n          label=\"Using selector expression.\"\n          code={Examples.Collection.Count.Example2}\n        />\n        <CodeExample\n          label={\n            <>\n              Using <InlineCode>For</InlineCode> function.\n            </>\n          }\n          code={Examples.Collection.Count.Example3}\n        />\n      </ValidatorFunction>\n      <hr className=\"my-6\" />\n      <ValidatorFunction\n        name=\"MinCount\"\n        description=\"Ensures the collection has a specified minimum item count.\"\n        methods={[\n          `MinCount<T>(int count)`,\n          `MinCount<T, P>(Expression<Func<T, IEnumerable<P>>> selector, int count)`,\n        ]}\n        brokenRule=\"Collection count must be at least {count}.\"\n      >\n        <CodeExample\n          label=\"Using type instance.\"\n          code={Examples.Collection.MinCount.Example1}\n        />\n        <CodeExample\n          label=\"Using selector expression.\"\n          code={Examples.Collection.MinCount.Example2}\n        />\n        <CodeExample\n          label={\n            <>\n              Using <InlineCode>For</InlineCode> function.\n            </>\n          }\n          code={Examples.Collection.MinCount.Example3}\n        />\n      </ValidatorFunction>\n      <hr className=\"my-6\" />\n      <ValidatorFunction\n        name=\"MaxCount\"\n        description=\"Ensures the collection has a specified maximum item count.\"\n        methods={[\n          `MaxCount<T>(int count)`,\n          `MaxCount<T, P>(Expression<Func<T, IEnumerable<P>>> selector, int count)`,\n        ]}\n        brokenRule=\"Collection count cannot be greater than {count}.\"\n      >\n        <CodeExample\n          label=\"Using type instance.\"\n          code={Examples.Collection.MaxCount.Example1}\n        />\n        <CodeExample\n          label=\"Using selector expression.\"\n          code={Examples.Collection.MaxCount.Example2}\n        />\n        <CodeExample\n          label={\n            <>\n              Using <InlineCode>For</InlineCode> function.\n            </>\n          }\n          code={Examples.Collection.MaxCount.Example3}\n        />\n      </ValidatorFunction>\n      <hr className=\"my-6\" />\n      <ValidatorFunction\n        name=\"Contains\"\n        description=\"Ensures the collection contains the specified item.\"\n        methods={[\n          `Contains<T>(T item)`,\n          `Contains<T, P>(Expression<Func<T, IEnumerable<P>>> selector, P item)`,\n        ]}\n        brokenRule=\"Collection must contain item '{item}'.\"\n      >\n        <CodeExample\n          label=\"Using type instance.\"\n          code={Examples.Collection.Contains.Example1}\n        />\n        <CodeExample\n          label=\"Using selector expression.\"\n          code={Examples.Collection.Contains.Example2}\n        />\n        <CodeExample\n          label={\n            <>\n              Using <InlineCode>For</InlineCode> function.\n            </>\n          }\n          code={Examples.Collection.Contains.Example3}\n        />\n      </ValidatorFunction>\n    </Layout>\n  )\n}\n\nexport default CollectionFunctions\n","import React, { FC } from \"react\"\nimport InlineCode from \"./inlineCode\"\nimport CSharp from \"./csharp\"\n\ntype FunctionProps = {\n  name: string\n  description: string\n  methods: string[]\n  brokenRule?: string\n}\n\nexport const ValidatorFunction: FC<FunctionProps> = ({\n  name,\n  description,\n  methods,\n  brokenRule,\n  children,\n}) => {\n  return (\n    <div className=\"mb-4\" id={name}>\n      <h2 className=\"font-semibold\">{name}</h2>\n      <p>{description}</p>\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Methods</h5>\n      {methods.map((method) => (\n        <>\n          <InlineCode className=\"text-sm\">{method}</InlineCode>\n          <br />\n        </>\n      ))}\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Broken Rule</h5>\n      <p className=\"font-semibold font-mono text-sm text-red-800 bg-red-100 inline px-1\">\n        {brokenRule}\n      </p>\n      <h5 className=\"font-semibold text-gray-800 text-sm mt-4\">\n        Example Usage\n      </h5>\n      {children}\n    </div>\n  )\n}\n\ntype CodeExampleProps = {\n  label: string | JSX.Element\n  code: string\n}\n\nexport const CodeExample: FC<CodeExampleProps> = ({ label, code }) => {\n  return (\n    <>\n      <p className=\"text-gray-700 mb-0 pb-0 mt-4\">{label}</p>\n      <CSharp code={code} />\n    </>\n  )\n}\n"],"sourceRoot":""}