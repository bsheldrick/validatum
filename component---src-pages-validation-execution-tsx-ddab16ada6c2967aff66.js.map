{"version":3,"sources":["webpack:///./src/components/inlineCode.tsx","webpack:///./src/components/validatorFuncs.tsx","webpack:///./src/pages/validation/execution.tsx"],"names":["InlineCode","code","className","children","rest","classes","ValidatorFunction","name","description","methods","brokenRule","id","map","method","CodeExample","label","ExecutingValidators","to"],"mappings":"yKAwBeA,IAjByB,SAAC,GAKnC,IAJJC,EAII,EAJJA,KACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,SACGC,E,oIACC,oCACAC,EAAU,cAId,OAHIH,IACFG,EAAaA,EAAN,IAAiBH,GAGxB,wCAAMA,UAAWG,GAAaD,GAC3BH,GAAcE,K,iKCRRG,EAAuC,SAAC,GAM/C,IALJC,EAKI,EALJA,KACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,WACAP,EACI,EADJA,SAEA,OACE,yBAAKD,UAAU,OAAOS,GAAIJ,GACxB,wBAAIL,UAAU,iBAAiBK,GAC/B,2BAAIC,GACJ,wBAAIN,UAAU,4CAAd,WACCO,EAAQG,KAAI,SAACC,GAAD,OACX,oCACE,kBAAC,IAAD,CAAYX,UAAU,mDACnBW,GAEH,iCAGJ,wBAAIX,UAAU,4CAAd,eACA,uBAAGA,UAAU,4DACVQ,GAEH,wBAAIR,UAAU,4CAAd,iBAGCC,IAUMW,EAAoC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOd,EAAV,EAAUA,KAAV,OAC/C,oCACGc,GAAS,uBAAGb,UAAU,gCAAgCa,GACvD,kBAAC,IAAD,CAAQd,KAAMA,O,oCCnDlB,gFAkFee,UAhDf,WACE,OACE,kBAAC,IAAD,KACE,qDACA,2DACgC,IAC9B,kBAAC,OAAD,CAAMC,GAAG,gCACP,kBAAC,IAAD,CAAYhB,KAAK,yBACX,IAJV,wCAOA,gCACI,kBAAC,IAAD,CAAYA,KAAK,iBADrB,wBAC4D,IAC1D,kBAAC,IAAD,CAAYA,KAAK,YAFnB,aAE0C,IACxC,kBAAC,IAAD,CAAYA,KAAK,yBAEnB,wBAAIC,UAAU,SACd,wBAAIA,UAAU,8BAAd,UACA,kBAAC,IAAD,CACEA,UAAU,kDACVD,KAAK,wDAEP,wBAAIC,UAAU,4CAAd,WACA,kBAAC,IAAD,CAAYA,UAAU,mDAAtB,oBAGA,4BACA,wBAAIA,UAAU,4CAAd,iBAGA,kBAAC,IAAD,CACED,KA3DgB,orBA4DhBc,MAAM,uCAER,wBAAIb,UAAU,SACd,wBAAIA,UAAU,QAAd,YACA,wBAAIA,UAAU,QACZ,4BACE,kBAAC,OAAD,CAAMe,GAAG,wBAAT,uBAEF,4BACE,kBAAC,OAAD,CAAMA,GAAG,wBAAT","file":"component---src-pages-validation-execution-tsx-ddab16ada6c2967aff66.js","sourcesContent":["import React, { FC } from \"react\"\n\ntype InlineCodeProps = {\n  code?: string\n  className?: string\n}\n\nconst InlineCode: FC<InlineCodeProps> = ({\n  code,\n  className,\n  children,\n  ...rest\n}) => {\n  let classes = \"inline-code\"\n  if (className) {\n    classes = `${classes} ${className}`\n  }\n  return (\n    <span className={classes} {...rest}>\n      {code ? code : children}\n    </span>\n  )\n}\n\nexport default InlineCode\n","import React, { FC } from \"react\"\nimport InlineCode from \"./inlineCode\"\nimport CSharp from \"./csharp\"\n\ntype FunctionProps = {\n  name: string\n  description: string\n  methods: string[]\n  brokenRule?: string\n}\n\nexport const ValidatorFunction: FC<FunctionProps> = ({\n  name,\n  description,\n  methods,\n  brokenRule,\n  children,\n}) => {\n  return (\n    <div className=\"mb-4\" id={name}>\n      <h2 className=\"font-semibold\">{name}</h2>\n      <p>{description}</p>\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Methods</h5>\n      {methods.map((method) => (\n        <>\n          <InlineCode className=\"text-sm font-semibold text-blue-600 bg-blue-100\">\n            {method}\n          </InlineCode>\n          <br />\n        </>\n      ))}\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Broken Rule</h5>\n      <p className=\"font-semibold font-mono text-sm text-red-600 inline px-1\">\n        {brokenRule}\n      </p>\n      <h5 className=\"font-semibold text-gray-800 text-sm mt-4\">\n        Example Usage\n      </h5>\n      {children}\n    </div>\n  )\n}\n\ntype CodeExampleProps = {\n  code: string\n  label?: string | JSX.Element\n}\n\nexport const CodeExample: FC<CodeExampleProps> = ({ label, code }) => (\n  <>\n    {label && <p className=\"text-gray-700 mb-0 pb-0 mt-4\">{label}</p>}\n    <CSharp code={code} />\n  </>\n)\n","import { Link } from \"gatsby\"\nimport React, { ReactElement } from \"react\"\nimport InlineCode from \"../../components/inlineCode\"\nimport Layout from \"../../components/layout\"\nimport { CodeExample } from \"../../components/validatorFuncs\"\n\nconst executeExample1 = `// build a validator\nvar validator = new ValidatorBuilder<Employee>()\n    .Required(e => e.FirstName)\n    .For(e => e.LastName, name => \n    {\n        name.Required()\n            .MaxLength(30);\n    })\n    .Email(e => e.Email)\n    .Range(e => e.Salary, 50000, 100000)\n    .LessThanOrEqual(e => e.Commenced, DateTime.Today)\n    .Continue(v =>\n    {\n        v.True(e => e.Active);\n    })\n    .Build();\n\n// object to validate\nvar employee = new Employee\n{\n    FirstName = \"Homer\",\n    Email = \"homer@springfieldnuclear.com\",\n    Salary = 45000\n};\n\n// execute the validator\nvar result = validator.Validate(employee, new ValidationOptions { ThrowWhenInvalid = true });`\n\nfunction ExecutingValidators(): ReactElement {\n  return (\n    <Layout>\n      <h1>Executing a Validator</h1>\n      <p>\n        With your validator built via{\" \"}\n        <Link to=\"/building/validator-builder/\">\n          <InlineCode code=\"ValidatorBuilder<T>\" />\n        </Link>{\" \"}\n        you can now start validating values.\n      </p>\n      <p>\n        A <InlineCode code=\"Validator<T>\" /> is returned from the{\" \"}\n        <InlineCode code=\"Build()\" /> method of{\" \"}\n        <InlineCode code=\"ValidatorBuilder<T>\" />\n      </p>\n      <hr className=\"my-6\" />\n      <h5 className=\"font-semibold text-sm mb-4\">Method</h5>\n      <InlineCode\n        className=\"text-sm text-blue-600 bg-blue-100 font-semibold\"\n        code=\"Validate(T value, ValidationOptions options = null)\"\n      />\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Returns</h5>\n      <InlineCode className=\"text-sm text-blue-600 bg-blue-100 font-semibold\">\n        ValidationResult\n      </InlineCode>\n      <p></p>\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">\n        Example Usage\n      </h5>\n      <CodeExample\n        code={executeExample1}\n        label=\"Building and executing a Validator\"\n      />\n      <hr className=\"my-6\" />\n      <h2 className=\"mt-8\">See also</h2>\n      <ul className=\"list\">\n        <li>\n          <Link to=\"/validation/options/\">Validation Options</Link>\n        </li>\n        <li>\n          <Link to=\"/validation/results/\">Validation Results</Link>\n        </li>\n      </ul>\n    </Layout>\n  )\n}\n\nexport default ExecutingValidators\n"],"sourceRoot":""}