{"version":3,"sources":["webpack:///./src/components/inlineCode.tsx","webpack:///./src/pages/building/conditional-functions.tsx","webpack:///./src/components/validatorFuncs.tsx"],"names":["InlineCode","code","className","children","rest","classes","ConditionalFunctions","map","func","to","ConditionalMethod","name","description","method","label","id","ValidatorFunction","methods","brokenRule","CodeExample"],"mappings":"wKAwBeA,IAjByB,SAAC,GAKnC,IAJJC,EAII,EAJJA,KACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,SACGC,E,oIACC,oCACAC,EAAU,cAId,OAHIH,IACFG,EAAaA,EAAN,IAAiBH,GAGxB,wCAAMA,UAAWG,GAAaD,GAC3BH,GAAcE,K,8HCgKNG,UAlFf,WACE,OACE,kBAAC,IAAD,KACE,qDACA,2IAIA,2BACE,wBAAIJ,UAAU,QACX,CAAC,OAAQ,UAAW,KAAM,YAAYK,KAAI,SAACC,GAAD,OACzC,4BACE,kBAAC,OAAD,CAAMC,GAAE,2BAA6BD,GAASA,SAKtD,wBAAIN,UAAU,SACd,kBAACQ,EAAD,CACEC,KAAK,OACLC,YAAY,2DACZC,OAAO,kFAEP,kBAAC,IAAD,CACEC,MAAM,yDACNb,KApHc,4aAsHhB,kBAAC,IAAD,CACEa,MAAM,8DACNb,KAzGe,mbA4GnB,wBAAIC,UAAU,SACd,kBAACQ,EAAD,CACEC,KAAK,UACLC,YAAY,4DACZC,OAAO,qFAEP,kBAAC,IAAD,CACEC,MAAM,6DACNb,KArGiB,mbAuGnB,kBAAC,IAAD,CACEa,MAAM,0DACNb,KA1FkB,kbA6FtB,wBAAIC,UAAU,SACd,kBAACQ,EAAD,CACEC,KAAK,KACLC,YACE,wEACoC,IAClC,kBAAC,IAAD,CAAYX,KAAK,wBAFnB,yCAMFY,OAAO,wFAEP,kBAAC,IAAD,CACEC,MAAM,qEACNb,KA5FQ,gXA+FZ,wBAAIC,UAAU,SACd,kBAACQ,EAAD,CACEC,KAAK,WACLC,YACE,wEACoC,IAClC,kBAAC,IAAD,CAAYX,KAAK,yBAFnB,QAGE,kBAAC,IAAD,CAAYA,KAAK,iCAHnB,sBAMFY,OAAO,kDAEP,kBAAC,IAAD,CAAaZ,KA9FG,smBA4GxB,IAAMS,EAAgD,SAAC,GAAD,IACpDC,EADoD,EACpDA,KACAC,EAFoD,EAEpDA,YACAC,EAHoD,EAGpDA,OACAV,EAJoD,EAIpDA,SAJoD,OAMpD,yBAAKD,UAAU,OAAOa,GAAIJ,GACxB,wBAAIT,UAAU,iBAAiBS,GAC/B,uBAAGT,UAAU,QAAQU,GACrB,wBAAIV,UAAU,uCAAd,UACA,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAYA,UAAU,mDACnBW,IAGL,wBAAIX,UAAU,uCAAd,iBACCC,K,iKChMQa,EAAuC,SAAC,GAM/C,IALJL,EAKI,EALJA,KACAC,EAII,EAJJA,YACAK,EAGI,EAHJA,QACAC,EAEI,EAFJA,WACAf,EACI,EADJA,SAEA,OACE,yBAAKD,UAAU,OAAOa,GAAIJ,GACxB,wBAAIT,UAAU,iBAAiBS,GAC/B,2BAAIC,GACJ,wBAAIV,UAAU,4CAAd,WACCe,EAAQV,KAAI,SAACM,GAAD,OACX,oCACE,kBAAC,IAAD,CAAYX,UAAU,mDACnBW,GAEH,iCAGJ,wBAAIX,UAAU,4CAAd,eACA,uBAAGA,UAAU,4DACVgB,GAEH,wBAAIhB,UAAU,4CAAd,iBAGCC,IAUMgB,EAAoC,SAAC,GAAD,IAAGL,EAAH,EAAGA,MAAOb,EAAV,EAAUA,KAAV,OAC/C,oCACGa,GAAS,uBAAGZ,UAAU,gCAAgCY,GACvD,kBAAC,IAAD,CAAQb,KAAMA","file":"component---src-pages-building-conditional-functions-tsx-fc406e9a572acdfb61a4.js","sourcesContent":["import React, { FC } from \"react\"\n\ntype InlineCodeProps = {\n  code?: string\n  className?: string\n}\n\nconst InlineCode: FC<InlineCodeProps> = ({\n  code,\n  className,\n  children,\n  ...rest\n}) => {\n  let classes = \"inline-code\"\n  if (className) {\n    classes = `${classes} ${className}`\n  }\n  return (\n    <span className={classes} {...rest}>\n      {code ? code : children}\n    </span>\n  )\n}\n\nexport default InlineCode\n","import { Link } from \"gatsby\"\nimport React, { FC, ReactElement } from \"react\"\nimport InlineCode from \"../../components/inlineCode\"\nimport Layout from \"../../components/layout\"\nimport { CodeExample } from \"../../components/validatorFuncs\"\n\nconst whenTrueExample = `var validator = new ValidatorBuilder<string>()\n    .When(\n        ctx => context.Value == \"trap\",\n        ctx => \n        {\n            if (context.Value == \"trap\")\n            {\n                context.AddBrokenRule(\"ItsATrap\", \"Trapped\", \"You fell into my trap\");\n            }\n        })\n    .Build();\n    \n// this will trigger the validation function to be executed\nvar result = validator.Validate(\"trap\");`\n\nconst whenFalseExample = `var validator = new ValidatorBuilder<string>()\n    .When(\n        ctx => context.Value == \"trap\",\n        ctx => \n        {\n            if (context.Value == \"trap\")\n            {\n                context.AddBrokenRule(\"ItsATrap\", \"Trapped\", \"You fell into my trap\");\n            }\n        })\n    .Build();\n    \n// this will not trigger the validation function to be executed\nvar result = validator.Validate(\"sucker\");`\n\nconst whenNotTrueExample = `var validator = new ValidatorBuilder<string>()\n    .WhenNot(\n        ctx => context.Value == \"trap\",\n        ctx => \n        {\n            if (context.Value == \"trap\")\n            {\n                context.AddBrokenRule(\"ItsATrap\", \"Trapped\", \"You fell into my trap\");\n            }\n        })\n    .Build();\n    \n// this will not trigger the validation function to be executed\nvar result = validator.Validate(\"trap\");`\n\nconst whenNotFalseExample = `var validator = new ValidatorBuilder<string>()\n    .WhenNot(\n        ctx => context.Value == \"trap\",\n        ctx => \n        {\n            if (context.Value == \"trap\")\n            {\n                context.AddBrokenRule(\"ItsATrap\", \"Trapped\", \"You fell into my trap\");\n            }\n        })\n    .Build();\n    \n// this will trigger the validation function to be executed\nvar result = validator.Validate(\"sucker\");`\n\nconst ifExample = `var validator = new ValidatorBuilder<string>()\n    .If(ctx => context.Value == \"howdy\",\n        (builder) => \n        {\n            builder\n                .NotNull()\n                .Contains(\"how\"); // no need to call Build()\n        })\n    .Build();\n\n// the conditional validator will be built and executed\nvar result = validator.Validate(\"howdy\");`\n\nconst continueExample = `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Age, v => v.GreaterThan(18))\n    // context.IsValid is true\n    .Continue((builder) => \n        {\n            builder.For(e => e.DriversLicenceNo, v => v.NotNull());\n        })\n    // this will make context.IsValid be false\n    .For(e => e.DriversLicenceNo, v => v.Null())\n    // context.IsValid is now false, continue function won't execute\n    .Continue((builder) => \n        {\n            builder.NotNull();\n        })\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 22, DriversLicenceNo = \"A2345\" });`\n\nfunction ConditionalFunctions(): ReactElement {\n  return (\n    <Layout>\n      <h1>Conditional Functions</h1>\n      <p>\n        Validatum provides built-in extension methods that allow for conditional\n        execution of a validation function.\n      </p>\n      <p>\n        <ul className=\"list\">\n          {[\"When\", \"WhenNot\", \"If\", \"Continue\"].map((func) => (\n            <li>\n              <Link to={`/functions/conditional/#${func}`}>{func}</Link>\n            </li>\n          ))}\n        </ul>\n      </p>\n      <hr className=\"my-6\" />\n      <ConditionalMethod\n        name=\"When\"\n        description=\"Executes a function when the predicate resolves to true.\"\n        method=\"When<T>(Func<ValidationContext<T>, bool> predicate, ValidatorDelegate<T> func)\"\n      >\n        <CodeExample\n          label=\"Validation function is executed when predicate is true\"\n          code={whenTrueExample}\n        />\n        <CodeExample\n          label=\"Validation function is not executed when predicate is false\"\n          code={whenFalseExample}\n        />\n      </ConditionalMethod>\n      <hr className=\"my-8\" />\n      <ConditionalMethod\n        name=\"WhenNot\"\n        description=\"Executes a function when the predicate resolves to false.\"\n        method=\"WhenNot<T>(Func<ValidationContext<T>, bool> predicate, ValidatorDelegate<T> func)\"\n      >\n        <CodeExample\n          label=\"Validation function is not executed when predicate is true\"\n          code={whenNotTrueExample}\n        />\n        <CodeExample\n          label=\"Validation function is executed when predicate is false\"\n          code={whenNotFalseExample}\n        />\n      </ConditionalMethod>\n      <hr className=\"my-8\" />\n      <ConditionalMethod\n        name=\"If\"\n        description={\n          <>\n            Allows for the inclusion of a new{\" \"}\n            <InlineCode code=\"ValidatorBuilder<T>\" /> when the predicate\n            resolves to true.\n          </>\n        }\n        method=\"If<T>(Func<ValidationContext<T>, bool> predicate, Action<IValidatorBuilder<T>> func)\"\n      >\n        <CodeExample\n          label=\"Validator is built and function is executed when predicate is true\"\n          code={ifExample}\n        />\n      </ConditionalMethod>\n      <hr className=\"my-8\" />\n      <ConditionalMethod\n        name=\"Continue\"\n        description={\n          <>\n            Allows for the inclusion of a new{\" \"}\n            <InlineCode code=\"IValidatorBuilder<T>\" /> when\n            <InlineCode code=\"ValidationContext<T>.IsValid\" /> resolves to true.\n          </>\n        }\n        method=\"Continue<T>(Action<IValidatorBuilder<T>> func)\"\n      >\n        <CodeExample code={continueExample} />\n      </ConditionalMethod>\n    </Layout>\n  )\n}\n\nexport default ConditionalFunctions\n\ntype ConditionalMethodProps = {\n  name: string\n  description: string | JSX.Element\n  method: string\n}\n\nconst ConditionalMethod: FC<ConditionalMethodProps> = ({\n  name,\n  description,\n  method,\n  children,\n}) => (\n  <div className=\"mb-4\" id={name}>\n    <h2 className=\"font-semibold\">{name}</h2>\n    <p className=\"my-4\">{description}</p>\n    <h5 className=\"font-semibold text-gray-800 text-sm\">Method</h5>\n    <div className=\"my-4\">\n      <InlineCode className=\"text-sm text-blue-600 bg-blue-100 font-semibold\">\n        {method}\n      </InlineCode>\n    </div>\n    <h5 className=\"font-semibold text-gray-800 text-sm\">Example Usage</h5>\n    {children}\n  </div>\n)\n","import React, { FC } from \"react\"\nimport InlineCode from \"./inlineCode\"\nimport CSharp from \"./csharp\"\n\ntype FunctionProps = {\n  name: string\n  description: string\n  methods: (string | JSX.Element)[]\n  brokenRule?: string\n}\n\nexport const ValidatorFunction: FC<FunctionProps> = ({\n  name,\n  description,\n  methods,\n  brokenRule,\n  children,\n}) => {\n  return (\n    <div className=\"mb-4\" id={name}>\n      <h2 className=\"font-semibold\">{name}</h2>\n      <p>{description}</p>\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Methods</h5>\n      {methods.map((method) => (\n        <>\n          <InlineCode className=\"text-sm font-semibold text-blue-600 bg-blue-100\">\n            {method}\n          </InlineCode>\n          <br />\n        </>\n      ))}\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Broken Rule</h5>\n      <p className=\"font-semibold font-mono text-sm text-red-600 inline px-1\">\n        {brokenRule}\n      </p>\n      <h5 className=\"font-semibold text-gray-800 text-sm mt-4\">\n        Example Usage\n      </h5>\n      {children}\n    </div>\n  )\n}\n\ntype CodeExampleProps = {\n  code: string\n  label?: string | JSX.Element\n}\n\nexport const CodeExample: FC<CodeExampleProps> = ({ label, code }) => (\n  <>\n    {label && <p className=\"text-gray-700 mb-0 pb-0 mt-4\">{label}</p>}\n    <CSharp code={code} />\n  </>\n)\n"],"sourceRoot":""}