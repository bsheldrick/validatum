{"version":3,"sources":["webpack:///./src/components/inlineCode.tsx","webpack:///./src/pages/building/for-function.tsx","webpack:///./src/components/validatorFuncs.tsx"],"names":["InlineCode","code","className","children","rest","classes","ForFunction","ValidatorFunction","name","description","methods","brokenRule","id","map","method","CodeExample","label"],"mappings":"wKAwBeA,IAjByB,SAAC,GAKnC,IAJJC,EAII,EAJJA,KACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,SACGC,E,oIACC,oCACAC,EAAU,cAId,OAHIH,IACFG,EAAaA,EAAN,IAAiBH,GAGxB,wCAAMA,UAAWG,GAAaD,GAC3BH,GAAcE,K,kCCnBrB,oEAiFeG,UA1CK,kBAClB,kBAAC,IAAD,KACE,4BACE,mCADF,aAGA,gDACoB,kBAAC,IAAD,YADpB,yHAKA,kCACM,kBAAC,IAAD,YADN,6IAKA,0LAKA,wBAAIJ,UAAU,SACd,wBAAIA,UAAU,yBAAd,UACA,yBAAKA,UAAU,QACb,kBAAC,IAAD,CACEA,UAAU,kDACVD,KAAK,mFAGT,uBAAGC,UAAU,QAAb,gFAIA,iFACsD,IACpD,kBAAC,IAAD,CAAYD,KAAK,yBAFnB,qCAGO,kBAAC,IAAD,UAHP,KAGmC,8DAHnC,MAKA,wBAAIC,UAAU,4CAAd,iBACA,kBAAC,IAAD,CAAaD,KAxEG,0gC,iKCMPM,EAAuC,SAAC,GAM/C,IALJC,EAKI,EALJA,KACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,WACAR,EACI,EADJA,SAEA,OACE,yBAAKD,UAAU,OAAOU,GAAIJ,GACxB,wBAAIN,UAAU,iBAAiBM,GAC/B,2BAAIC,GACJ,wBAAIP,UAAU,4CAAd,WACCQ,EAAQG,KAAI,SAACC,GAAD,OACX,oCACE,kBAAC,IAAD,CAAYZ,UAAU,mDACnBY,GAEH,iCAGJ,wBAAIZ,UAAU,4CAAd,eACA,uBAAGA,UAAU,4DACVS,GAEH,wBAAIT,UAAU,4CAAd,iBAGCC,IAUMY,EAAoC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOf,EAAV,EAAUA,KAAV,OAC/C,oCACGe,GAAS,uBAAGd,UAAU,gCAAgCc,GACvD,kBAAC,IAAD,CAAQf,KAAMA","file":"component---src-pages-building-for-function-tsx-ccd7bd72c27f5ebcf522.js","sourcesContent":["import React, { FC } from \"react\"\n\ntype InlineCodeProps = {\n  code?: string\n  className?: string\n}\n\nconst InlineCode: FC<InlineCodeProps> = ({\n  code,\n  className,\n  children,\n  ...rest\n}) => {\n  let classes = \"inline-code\"\n  if (className) {\n    classes = `${classes} ${className}`\n  }\n  return (\n    <span className={classes} {...rest}>\n      {code ? code : children}\n    </span>\n  )\n}\n\nexport default InlineCode\n","import React from \"react\"\nimport InlineCode from \"../../components/inlineCode\"\nimport Layout from \"../../components/layout\"\nimport { CodeExample } from \"../../components/validatorFuncs\"\n\nconst forExample1 = `var validator = new ValidatorBuilder<Employee>()\n    // FirstName is required with min length of 2 and must contain the letter 'p'\n    .For(e => e.FirstName, name => \n        {\n            name.Required()\n                .MinLength(2)\n                .Contains(\"p\");\n        })\n    // Address must be set with AddressLine1, Postcode and Region required and\n    // the Country must equal Australia\n    .For(e => e.Address, addr => \n        {\n            addr.NotNull()\n                .Required(a => a.AddressLine1)\n                .Required(a => a.PostCode)\n                .Required(a => a.Region)\n                .Equal(a => a.Country, \"Australia\");\n        })\n    .Build();\n\n// this will not validate\nvar result = validator.Validate(\n    new Employee \n    {\n        FirstName = \"Steve\",\n        Address = new Address\n        {\n            AddressLine1 = \"742 Evergreen Terrace\",\n            PostCode = \"3500\",\n            Region = \"VIC\",\n            Country = \"Australia\"\n        }\n    });`\n\nconst ForFunction = () => (\n  <Layout>\n    <h1>\n      <em>For</em> Function\n    </h1>\n    <p>\n      In Validatum, the <InlineCode>For</InlineCode> function is an extension\n      method used to build a validator that targets the type returned from a\n      selector expression.\n    </p>\n    <p>\n      The <InlineCode>For</InlineCode> function can be used to create very\n      complex nested validation functions against the properties (and nested\n      properties) of complex types.\n    </p>\n    <p>\n      The selector expression makes it easy to target a property, retrieve its\n      value at runtime, and build a nested inline validator against the\n      property's type.\n    </p>\n    <hr className=\"my-6\" />\n    <h5 className=\"font-semibold text-sm\">Method</h5>\n    <div className=\"my-4\">\n      <InlineCode\n        className=\"text-sm text-blue-600 bg-blue-100 font-semibold\"\n        code=\"For<T, P>(Expression<Func<T, P>> selector, Action<IValidatorBuilder<P>> func)\"\n      />\n    </div>\n    <p className=\"mt-4\">\n      The first parameter is the selector expression (a type of lambda\n      expression)\n    </p>\n    <p>\n      The second parameter is a function that provides an{\" \"}\n      <InlineCode code=\"IValidatorBuilder<P>\" /> that will target the return\n      type <InlineCode>P</InlineCode> (<em>Note the second type parameter</em>).\n    </p>\n    <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Example Usage</h5>\n    <CodeExample code={forExample1} />\n  </Layout>\n)\n\nexport default ForFunction\n","import React, { FC } from \"react\"\nimport InlineCode from \"./inlineCode\"\nimport CSharp from \"./csharp\"\n\ntype FunctionProps = {\n  name: string\n  description: string\n  methods: (string | JSX.Element)[]\n  brokenRule?: string\n}\n\nexport const ValidatorFunction: FC<FunctionProps> = ({\n  name,\n  description,\n  methods,\n  brokenRule,\n  children,\n}) => {\n  return (\n    <div className=\"mb-4\" id={name}>\n      <h2 className=\"font-semibold\">{name}</h2>\n      <p>{description}</p>\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Methods</h5>\n      {methods.map((method) => (\n        <>\n          <InlineCode className=\"text-sm font-semibold text-blue-600 bg-blue-100\">\n            {method}\n          </InlineCode>\n          <br />\n        </>\n      ))}\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Broken Rule</h5>\n      <p className=\"font-semibold font-mono text-sm text-red-600 inline px-1\">\n        {brokenRule}\n      </p>\n      <h5 className=\"font-semibold text-gray-800 text-sm mt-4\">\n        Example Usage\n      </h5>\n      {children}\n    </div>\n  )\n}\n\ntype CodeExampleProps = {\n  code: string\n  label?: string | JSX.Element\n}\n\nexport const CodeExample: FC<CodeExampleProps> = ({ label, code }) => (\n  <>\n    {label && <p className=\"text-gray-700 mb-0 pb-0 mt-4\">{label}</p>}\n    <CSharp code={code} />\n  </>\n)\n"],"sourceRoot":""}