{"version":3,"sources":["webpack:///./src/components/inlineCode.tsx","webpack:///./src/pages/building/chaining-functions.tsx"],"names":["InlineCode","code","className","children","rest","classes","ChainingFunctions"],"mappings":"wKAwBeA,IAjByB,SAAC,GAKnC,IAJJC,EAII,EAJJA,KACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,SACGC,E,oIACC,oCACAC,EAAU,cAId,OAHIH,IACFG,EAAaA,EAAN,IAAiBH,GAGxB,wCAAMA,UAAWG,GAAaD,GAC3BH,GAAcE,K,kCCnBrB,oEAsCeG,UAzBf,WACE,OACE,kBAAC,IAAD,KACE,kDACA,6HAE6B,kBAAC,IAAD,CAAYL,KAAK,yBAA0B,IAFxE,6EAMA,iKAE+D,IAC7D,kBAAC,IAAD,gBAHF,qBAGqD,IACnD,kBAAC,IAAD,CAAYA,KAAK,iBAJnB,cAMA,wBAAIC,UAAU,SACd,6BACE,wBAAIA,UAAU,4CAAd,WACA,kBAAC,IAAD,CAAQD,KA3BY","file":"component---src-pages-building-chaining-functions-tsx-84a3357be4d952e3d669.js","sourcesContent":["import React, { FC } from \"react\"\n\ntype InlineCodeProps = {\n  code?: string\n  className?: string\n}\n\nconst InlineCode: FC<InlineCodeProps> = ({\n  code,\n  className,\n  children,\n  ...rest\n}) => {\n  let classes = \"inline-code\"\n  if (className) {\n    classes = `${classes} ${className}`\n  }\n  return (\n    <span className={classes} {...rest}>\n      {code ? code : children}\n    </span>\n  )\n}\n\nexport default InlineCode\n","import React, { ReactElement } from \"react\"\nimport CSharp from \"../../components/csharp\"\nimport InlineCode from \"../../components/inlineCode\"\nimport Layout from \"../../components/layout\"\n\nconst chainingExampleCode = `var validator = new ValidatorBuilder<Employee>() // create builder instance\n    .Required(e => e.FirstName)           // first validation function\n    .Email(e => e.Email)                  // chaining the second validation function\n    .Contains(e => e.Skills, \"Moxie\")     // chaining third function \n    .Range(e => e.Salary, 50000, 100000)  // chain fourth function\n    .LessThanOrEqual(e => e.Commenced, DateTime.Today) // etc...\n    .Build();`\n\nfunction ChainingFunctions(): ReactElement {\n  return (\n    <Layout>\n      <h1>Chaining Functions</h1>\n      <p>\n        All built-in validation functions are simply extension methods that\n        always return the original <InlineCode code=\"IValidatorBuilder<T>\" />{\" \"}\n        instance, therefore allowing validation functions to be chained\n        together.\n      </p>\n      <p>\n        Validation functions are executed in the order they are defined in the\n        builder. When your validation function is complete, call the{\" \"}\n        <InlineCode>Build()</InlineCode> method to get the{\" \"}\n        <InlineCode code=\"Validator<T>\" /> instance.\n      </p>\n      <hr className=\"my-6\" />\n      <div>\n        <h5 className=\"font-semibold text-gray-800 text-sm mb-4\">Example</h5>\n        <CSharp code={chainingExampleCode} />\n      </div>\n    </Layout>\n  )\n}\n\nexport default ChainingFunctions\n"],"sourceRoot":""}