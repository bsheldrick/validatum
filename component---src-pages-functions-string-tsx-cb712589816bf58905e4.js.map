{"version":3,"sources":["webpack:///./src/components/codeExamples.ts","webpack:///./src/components/inlineCode.tsx","webpack:///./src/pages/functions/string.tsx","webpack:///./src/components/validatorFuncs.tsx"],"names":["Examples","Common","NotNull","Example1","Example2","Example3","Null","Equal","NotEqual","Comparison","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","Range","Compare","String","NotEmpty","Empty","Regex","Example4","StartsWith","EndsWith","Contains","Length","MinLength","MaxLength","Required","Email","Boolean","True","False","Collection","Count","MinCount","MaxCount","InlineCode","code","className","children","rest","classes","StringFunctions","title","description","map","func","to","name","methods","brokenRule","label","ValidatorFunction","id","method","CodeExample"],"mappings":"8FA4gBeA,IA5gBE,CACfC,OAAQ,CACNC,QAAS,CACPC,SAAU,0HAMVC,SAAU,4KAMVC,SAAU,4LAMZC,KAAM,CACJH,SAAU,uHAMVC,SAAU,yKAMVC,SAAU,yLAMZE,MAAO,CACLJ,SAAU,wIAMVC,SAAU,mLAMVC,SAAU,uMAMZG,SAAU,CACRL,SAAU,wHAMVC,SAAU,gKAMVC,SAAU,8KAOdI,WAAY,CACVC,YAAa,CACXP,SAAU,6HAMVC,SAAU,mKAMVC,SAAU,gLAMZM,mBAAoB,CAClBR,SAAU,oIAMVC,SAAU,0KAMVC,SAAU,uLAMZO,SAAU,CACRT,SAAU,0HAMVC,SAAU,gKAMVC,SAAU,6KAMZQ,gBAAiB,CACfV,SAAU,iIAMVC,SAAU,uKAMVC,SAAU,oLAMZS,MAAO,CACLX,SAAU,2HAMVC,SAAU,iKAMVC,SAAU,8KAMZU,QAAS,CACPZ,SAAU,mRAWda,OAAQ,CACNC,SAAU,CACRd,SAAU,2HAMVC,SAAU,6KAMVC,SAAU,6LAMZa,MAAO,CACLf,SAAU,sHAMVC,SAAU,0KAMVC,SAAU,0LAMZc,MAAO,CACLhB,SAAU,qIAMVC,SAAU,oLAMVC,SAAU,mMAMVe,SAAU,6JAMZC,WAAY,CACVlB,SAAU,wIAMVC,SAAU,qLAMVC,SAAU,mMAMZiB,SAAU,CACRnB,SAAU,qIAMVC,SAAU,oLAMVC,SAAU,gMAMZkB,SAAU,CACRpB,SAAU,sIAMVC,SAAU,oLAMVC,SAAU,wMAMZmB,OAAQ,CACNrB,SAAU,mIAMVC,SAAU,kLAMVC,SAAU,qMAMZoB,UAAW,CACTtB,SAAU,+HAMVC,SAAU,uKAMVC,SAAU,6LAMZqB,UAAW,CACTvB,SAAU,mIAMVC,SAAU,mLAMVC,SAAU,iMAMZsB,SAAU,CACRxB,SAAU,2HAMVC,SAAU,wKAMVC,SAAU,0LAMZuB,MAAO,CACLzB,SAAU,sIAMVC,SAAU,iLAMVC,SAAU,4LAOdwB,QAAS,CACPC,KAAM,CACJ3B,SAAU,uHAMVC,SAAU,iKAMVC,SAAU,+KAMZ0B,MAAO,CACL5B,SAAU,wHAMVC,SAAU,kKAMVC,SAAU,iLAOd2B,WAAY,CACVC,MAAO,CACL9B,SAAU,wJAMVC,SAAU,qLAMVC,SAAU,kMAMZ6B,SAAU,CACR/B,SAAU,oJAMVC,SAAU,wLAMVC,SAAU,qMAMZ8B,SAAU,CACRhC,SAAU,oJAMVC,SAAU,wLAMVC,SAAU,qMAMZkB,SAAU,CACRpB,SAAU,wKAMVC,SAAU,kMAMVC,SAAU,2M,+GC3eD+B,IAjByB,SAAC,GAKnC,IAJJC,EAII,EAJJA,KACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,SACGC,E,oIACC,oCACAC,EAAU,cAId,OAHIH,IACFG,EAAaA,EAAN,IAAiBH,GAGxB,wCAAMA,UAAWG,GAAaD,GAC3BH,GAAcE,K,kCCnBrB,4FAgVeG,UAzUf,WACE,OACE,kBAAC,IAAD,CACEC,MAAM,mBACNC,YAAY,2CAEZ,gDACA,2BACE,wBAAIN,UAAU,QACX,CACC,WACA,QACA,QACA,aACA,WACA,WACA,SACA,YACA,YACA,WACA,SACAO,KAAI,SAACC,GAAD,OACJ,4BACE,kBAAC,OAAD,CAAMC,GAAE,sBAAwBD,GAASA,SAKjD,wBAAIR,UAAU,SACd,kBAAC,IAAD,CACEU,KAAK,WACLJ,YAAY,yDACZK,QAAS,CAAC,aAAD,qDAITC,WAAW,0BAEX,kBAAC,IAAD,CACEC,MAAM,uBACNd,KAAMrC,IAASgB,OAAOC,SAASd,WAEjC,kBAAC,IAAD,CACEgD,MAAM,6BACNd,KAAMrC,IAASgB,OAAOC,SAASb,WAEjC,kBAAC,IAAD,CACE+C,MACE,6CACQ,kBAAC,IAAD,YADR,cAIFd,KAAMrC,IAASgB,OAAOC,SAASZ,YAGnC,wBAAIiC,UAAU,SACd,kBAAC,IAAD,CACEU,KAAK,QACLJ,YAAY,qDACZK,QAAS,CAAC,UAAD,kDACTC,WAAW,wBAEX,kBAAC,IAAD,CACEC,MAAM,uBACNd,KAAMrC,IAASgB,OAAOE,MAAMf,WAE9B,kBAAC,IAAD,CACEgD,MAAM,6BACNd,KAAMrC,IAASgB,OAAOE,MAAMd,WAE9B,kBAAC,IAAD,CACE+C,MACE,6CACQ,kBAAC,IAAD,YADR,cAIFd,KAAMrC,IAASgB,OAAOE,MAAMb,YAGhC,wBAAIiC,UAAU,SACd,kBAAC,IAAD,CACEU,KAAK,QACLJ,YAAY,iFACZK,QAAS,CAAC,wBAAD,uMAMTC,WAAW,6BAEX,kBAAC,IAAD,CACEC,MAAM,uBACNd,KAAMrC,IAASgB,OAAOG,MAAMhB,WAE9B,kBAAC,IAAD,CACEgD,MAAM,6BACNd,KAAMrC,IAASgB,OAAOG,MAAMf,WAE9B,kBAAC,IAAD,CACE+C,MACE,6CACQ,kBAAC,IAAD,YADR,cAIFd,KAAMrC,IAASgB,OAAOG,MAAMd,WAE9B,kBAAC,IAAD,CACE8C,MAAM,sBACNd,KAAMrC,IAASgB,OAAOG,MAAMC,YAGhC,wBAAIkB,UAAU,SACd,kBAAC,IAAD,CACEU,KAAK,aACLJ,YAAY,4EACZK,QAAS,CAAC,2BAAD,qEAITC,WAAW,oCAEX,kBAAC,IAAD,CACEC,MAAM,uBACNd,KAAMrC,IAASgB,OAAOK,WAAWlB,WAEnC,kBAAC,IAAD,CACEgD,MAAM,6BACNd,KAAMrC,IAASgB,OAAOK,WAAWjB,WAEnC,kBAAC,IAAD,CACE+C,MACE,6CACQ,kBAAC,IAAD,YADR,cAIFd,KAAMrC,IAASgB,OAAOK,WAAWhB,YAGrC,wBAAIiC,UAAU,SACd,kBAAC,IAAD,CACEU,KAAK,WACLJ,YAAY,0EACZK,QAAS,CAAC,yBAAD,mEAITC,WAAW,kCAEX,kBAAC,IAAD,CACEC,MAAM,uBACNd,KAAMrC,IAASgB,OAAOM,SAASnB,WAEjC,kBAAC,IAAD,CACEgD,MAAM,6BACNd,KAAMrC,IAASgB,OAAOM,SAASlB,WAEjC,kBAAC,IAAD,CACE+C,MACE,6CACQ,kBAAC,IAAD,YADR,cAIFd,KAAMrC,IAASgB,OAAOM,SAASjB,YAGnC,wBAAIiC,UAAU,SACd,kBAAC,IAAD,CACEU,KAAK,WACLJ,YAAY,yEACZK,QAAS,CAAC,yBAAD,mEAITC,WAAW,iCAEX,kBAAC,IAAD,CACEC,MAAM,uBACNd,KAAMrC,IAASgB,OAAOO,SAASpB,WAEjC,kBAAC,IAAD,CACEgD,MAAM,6BACNd,KAAMrC,IAASgB,OAAOO,SAASnB,WAEjC,kBAAC,IAAD,CACE+C,MACE,6CACQ,kBAAC,IAAD,YADR,cAIFd,KAAMrC,IAASgB,OAAOO,SAASlB,YAGnC,wBAAIiC,UAAU,SACd,kBAAC,IAAD,CACEU,KAAK,SACLJ,YAAY,oFACZK,QAAS,CAAC,2BAAD,qEAITC,WAAW,sDAEX,kBAAC,IAAD,CACEC,MAAM,uBACNd,KAAMrC,IAASgB,OAAOQ,OAAOrB,WAE/B,kBAAC,IAAD,CACEgD,MAAM,6BACNd,KAAMrC,IAASgB,OAAOQ,OAAOpB,WAE/B,kBAAC,IAAD,CACE+C,MACE,6CACQ,kBAAC,IAAD,YADR,cAIFd,KAAMrC,IAASgB,OAAOQ,OAAOnB,YAGjC,wBAAIiC,UAAU,SACd,kBAAC,IAAD,CACEU,KAAK,YACLJ,YAAY,iEACZK,QAAS,CAAC,qBAAD,+DAITC,WAAW,4CAEX,kBAAC,IAAD,CACEC,MAAM,uBACNd,KAAMrC,IAASgB,OAAOS,UAAUtB,WAElC,kBAAC,IAAD,CACEgD,MAAM,6BACNd,KAAMrC,IAASgB,OAAOS,UAAUrB,WAElC,kBAAC,IAAD,CACE+C,MACE,6CACQ,kBAAC,IAAD,YADR,cAIFd,KAAMrC,IAASgB,OAAOS,UAAUpB,YAGpC,wBAAIiC,UAAU,SACd,kBAAC,IAAD,CACEU,KAAK,YACLJ,YAAY,iEACZK,QAAS,CAAC,qBAAD,+DAITC,WAAW,4CAEX,kBAAC,IAAD,CACEC,MAAM,uBACNd,KAAMrC,IAASgB,OAAOU,UAAUvB,WAElC,kBAAC,IAAD,CACEgD,MAAM,6BACNd,KAAMrC,IAASgB,OAAOU,UAAUtB,WAElC,kBAAC,IAAD,CACE+C,MACE,6CACQ,kBAAC,IAAD,YADR,cAIFd,KAAMrC,IAASgB,OAAOU,UAAUrB,YAGpC,wBAAIiC,UAAU,SACd,kBAAC,IAAD,CACEU,KAAK,WACLJ,YAAY,+EACZK,QAAS,CAAC,aAAD,qDAITC,WAAW,sBAEX,kBAAC,IAAD,CACEC,MAAM,uBACNd,KAAMrC,IAASgB,OAAOW,SAASxB,WAEjC,kBAAC,IAAD,CACEgD,MAAM,6BACNd,KAAMrC,IAASgB,OAAOW,SAASvB,WAEjC,kBAAC,IAAD,CACE+C,MACE,6CACQ,kBAAC,IAAD,YADR,cAIFd,KAAMrC,IAASgB,OAAOW,SAAStB,YAGnC,wBAAIiC,UAAU,SACd,kBAAC,IAAD,CACEU,KAAK,QACLJ,YAAY,gEACZK,QAAS,CAAC,UAAD,kDACTC,WAAW,gCAEX,kBAAC,IAAD,CACEC,MAAM,uBACNd,KAAMrC,IAASgB,OAAOY,MAAMzB,WAE9B,kBAAC,IAAD,CACEgD,MAAM,6BACNd,KAAMrC,IAASgB,OAAOY,MAAMxB,WAE9B,kBAAC,IAAD,CACE+C,MACE,6CACQ,kBAAC,IAAD,YADR,cAIFd,KAAMrC,IAASgB,OAAOY,MAAMvB,e,iKC9TzB+C,EAAuC,SAAC,GAM/C,IALJJ,EAKI,EALJA,KACAJ,EAII,EAJJA,YACAK,EAGI,EAHJA,QACAC,EAEI,EAFJA,WACAX,EACI,EADJA,SAEA,OACE,yBAAKD,UAAU,OAAOe,GAAIL,GACxB,wBAAIV,UAAU,iBAAiBU,GAC/B,2BAAIJ,GACJ,wBAAIN,UAAU,4CAAd,WACCW,EAAQJ,KAAI,SAACS,GAAD,OACX,oCACE,kBAAC,IAAD,CAAYhB,UAAU,mDACnBgB,GAEH,iCAGJ,wBAAIhB,UAAU,4CAAd,eACA,uBAAGA,UAAU,4DACVY,GAEH,wBAAIZ,UAAU,4CAAd,iBAGCC,IAUMgB,EAAoC,SAAC,GAAD,IAAGJ,EAAH,EAAGA,MAAOd,EAAV,EAAUA,KAAV,OAC/C,oCACGc,GAAS,uBAAGb,UAAU,gCAAgCa,GACvD,kBAAC,IAAD,CAAQd,KAAMA","file":"component---src-pages-functions-string-tsx-cb712589816bf58905e4.js","sourcesContent":["const Examples = {\n  Common: {\n    NotNull: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .NotNull()\n    .Build();\n\nvar result = validator.Validate(null);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .NotNull(e => e.FirstName)\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Homer\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.NotNull())\n    .Build();\n\nvar result = validator.Validate(new Employee { LastName = \"Simpson\" });`,\n    },\n    Null: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .Null()\n    .Build();\n\nvar result = validator.Validate(null);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Null(e => e.FirstName)\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Homer\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.Null())\n    .Build();\n\nvar result = validator.Validate(new Employee { LastName = \"Simpson\" });`,\n    },\n    Equal: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .Equal(\"Smithers\")\n    .Build();\n\nvar result = validator.Validate(\"Smithers\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Equal(e => e.FirstName, \"Homer\")\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Homer\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.LastName, v => v.Equal(\"Smithers\"))\n    .Build();\n    \nvar result = validator.Validate(new Employee { LastName = \"Simpson\" });`,\n    },\n    NotEqual: {\n      Example1: `var validator = new ValidatorBuilder<int>()\n    .NotEqual(17)\n    .Build();\n\nvar result = validator.Validate(18);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .NotEqual(e => e.Age, 17)\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 18 });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Age, v => v.NotEqual(17))\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 18 });`,\n    },\n  },\n  Comparison: {\n    GreaterThan: {\n      Example1: `var validator = new ValidatorBuilder<int>()\n    .GreaterThan(18)\n    .Build();\n  \nvar result = validator.Validate(16);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .GreaterThan(e => e.Age, 18)\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 20 });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Age, v => v.GreaterThan(18))\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 17 });`,\n    },\n    GreaterThanOrEqual: {\n      Example1: `var validator = new ValidatorBuilder<int>()\n    .GreaterThanOrEqual(18)\n    .Build();\n  \nvar result = validator.Validate(16);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .GreaterThanOrEqual(e => e.Age, 18)\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 20 });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Age, v => v.GreaterThanOrEqual(18))\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 17 });`,\n    },\n    LessThan: {\n      Example1: `var validator = new ValidatorBuilder<int>()\n    .LessThan(18)\n    .Build();\n  \nvar result = validator.Validate(16);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .LessThan(e => e.Age, 18)\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 20 });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Age, v => v.LessThan(18))\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 17 });`,\n    },\n    LessThanOrEqual: {\n      Example1: `var validator = new ValidatorBuilder<int>()\n    .LessThanOrEqual(18)\n    .Build();\n  \nvar result = validator.Validate(16);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .LessThanOrEqual(e => e.Age, 18)\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 20 });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Age, v => v.LessThanOrEqual(18))\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 17 });`,\n    },\n    Range: {\n      Example1: `var validator = new ValidatorBuilder<int>()\n    .Range(18, 30)\n    .Build();\n  \nvar result = validator.Validate(24);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Range(e => e.Age, 18, 30)\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 20 });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Age, v => v.Range(18, 30))\n    .Build();\n\nvar result = validator.Validate(new Employee { Age = 17 });`,\n    },\n    Compare: {\n      Example1: `var validator = new ValidatorBuilder<LoginModel>()\n    .Compare(m => m.Password, m => m.PasswordConfirm)\n    .Build();\n\nvar result = validator.Validate(new LoginModel \n    { \n        Password = \"StrongP@ssw0rd\",\n        PasswordConfirm = \"StrongPassw0rd\"\n    });`,\n    },\n  },\n  String: {\n    NotEmpty: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .NotEmpty()\n    .Build();\n\nvar result = validator.Validate(null);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .NotEmpty(e => e.FirstName)\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Homer\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.NotEmpty())\n    .Build();\n\nvar result = validator.Validate(new Employee { LastName = \"Simpson\" });`,\n    },\n    Empty: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .Empty()\n    .Build();\n\nvar result = validator.Validate(\"\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Empty(e => e.FirstName)\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Homer\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.Empty())\n    .Build();\n\nvar result = validator.Validate(new Employee { LastName = \"Simpson\" });`,\n    },\n    Regex: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .Regex(\"^[0-9]*$\")\n    .Build();\n\nvar result = validator.Validate(\"12345\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Regex(e => e.FirstName, \"^[0-9]*$\")\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Six\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.Regex(\"^[0-9]*$\"))\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"7 of 9\" });`,\n\n      Example4: `var validator = new ValidatorBuilder<string>()\n    .Regex(\"^[a-z]*$\", RegexOptions.IgnoreCase)\n    .Build();\n\nvar result = validator.Validate(\"ABC\");`,\n    },\n    StartsWith: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .StartsWith(\"fun\")\n    .Build();\n\nvar result = validator.Validate(\"function\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .StartsWith(e => e.FirstName, \"Jo\")\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Homer\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.StartsWith(\"Pet\"))\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Peter\" });`,\n    },\n    EndsWith: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .EndsWith(\"on\")\n    .Build();\n\nvar result = validator.Validate(\"function\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .EndsWith(e => e.FirstName, \"son\")\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Jason\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.EndsWith(\"art\"))\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Lisa\" });`,\n    },\n    Contains: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .Contains(\"tio\")\n    .Build();\n\nvar result = validator.Validate(\"function\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Contains(e => e.FirstName, \"aso\")\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Jason\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.Contains(\"holo\"))\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Bartholomew\" });`,\n    },\n    Length: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .Length(3, 8)\n    .Build();\n\nvar result = validator.Validate(\"function\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Length(e => e.FirstName, 1, 15)\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Jason\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.Length(1, 10))\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Bartholomew\" });`,\n    },\n    MinLength: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .MinLength(3)\n    .Build();\n\nvar result = validator.Validate(\"stop\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .MinLength(e => e.Role, 5)\n    .Build();\n\nvar result = validator.Validate(new Employee { Role = \"Admin\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.MinLength(4))\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"Bart\" });`,\n    },\n    MaxLength: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .MaxLength(6)\n    .Build();\n\nvar result = validator.Validate(\"validate\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .MaxLength(e => e.Lastname, 12)\n    .Build();\n\nvar result = validator.Validate(new Employee { LastName = \"Smithers\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.MaxLength(4))\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"El Barto\" });`,\n    },\n    Required: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .Required()\n    .Build();\n\nvar result = validator.Validate(null);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Required(e => e.FirstName)\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.FirstName, v => v.Required())\n    .Build();\n\nvar result = validator.Validate(new Employee { FirstName = \"   \" });`,\n    },\n    Email: {\n      Example1: `var validator = new ValidatorBuilder<string>()\n    .Email()\n    .Build();\n\nvar result = validator.Validate(\"bart@example.com\");`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Email(e => e.Email)\n    .Build();\n\nvar result = validator.Validate(new Employee { Email = \"invalid[at]email.com\" });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Email, v => v.Email())\n    .Build();\n\nvar result = validator.Validate(new Employee { Email = \"homer@gmail.com\" });`,\n    },\n  },\n  Boolean: {\n    True: {\n      Example1: `var validator = new ValidatorBuilder<bool>()\n    .True()\n    .Build();\n\nvar result = validator.Validate(1 == 1);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .True(e => e.Active)\n    .Build();\n\nvar result = validator.Validate(new Employee { Active = false });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Active, v => v.True())\n    .Build();\n\nvar result = validator.Validate(new Employee { Active = true });`,\n    },\n    False: {\n      Example1: `var validator = new ValidatorBuilder<bool>()\n    .False()\n    .Build();\n\nvar result = validator.Validate(1 == 1);`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .False(e => e.Active)\n    .Build();\n\nvar result = validator.Validate(new Employee { Active = false });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Active, v => v.False())\n    .Build();\n\nvar result = validator.Validate(new Employee { Active = true });`,\n    },\n  },\n  Collection: {\n    Count: {\n      Example1: `var validator = new ValidatorBuilder<IEnumerable<string>>()\n    .Count(2)\n    .Build();\n\nvar result = validator.Validate(new[] { \"One\", \"Two\" });`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Count(e => e.Skills, 2)\n    .Build();\n\nvar result = validator.Validate(new Employee { Skills = new[] { \"Cromulent\" } });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Skills, v => v.Count(1))\n    .Build();\n\nvar result = validator.Validate(new Employee { Skills = new[] { \"Vandalism\" } });`,\n    },\n    MinCount: {\n      Example1: `var validator = new ValidatorBuilder<IEnumerable<string>>()\n    .MinCount(2)\n    .Build();\n\nvar result = validator.Validate(new[] { \"One\" });`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .MinCount(e => e.Skills, 2)\n    .Build();\n\nvar result = validator.Validate(new Employee { Skills = new[] { \"Cromulent\" } });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Skills, v => v.MinCount(1))\n    .Build();\n\nvar result = validator.Validate(new Employee { Skills = new[] { \"Vandalism\" } });`,\n    },\n    MaxCount: {\n      Example1: `var validator = new ValidatorBuilder<IEnumerable<string>>()\n    .MaxCount(2)\n    .Build();\n\nvar result = validator.Validate(new[] { \"One\" });`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .MaxCount(e => e.Skills, 2)\n    .Build();\n\nvar result = validator.Validate(new Employee { Skills = new[] { \"Cromulent\" } });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Skills, v => v.MaxCount(1))\n    .Build();\n\nvar result = validator.Validate(new Employee { Skills = new[] { \"Vandalism\" } });`,\n    },\n    Contains: {\n      Example1: `var validator = new ValidatorBuilder<IEnumerable<string>>()\n    .Contains(\"Two\")\n    .Build();\n\nvar result = validator.Validate(new[] { \"One\", \"Two\", \"Three\" });`,\n\n      Example2: `var validator = new ValidatorBuilder<Employee>()\n    .Contains(e => e.Skills, \"Cromulent\")\n    .Build();\n\nvar result = validator.Validate(new Employee { Skills = new[] { \"Cromulent\" } });`,\n\n      Example3: `var validator = new ValidatorBuilder<Employee>()\n    .For(e => e.Skills, v => v.Contains(\"Chill\"))\n    .Build();\n\nvar result = validator.Validate(new Employee { Skills = new[] { \"Wisdom\" } });`,\n    },\n  },\n}\n\nexport default Examples\n","import React, { FC } from \"react\"\n\ntype InlineCodeProps = {\n  code?: string\n  className?: string\n}\n\nconst InlineCode: FC<InlineCodeProps> = ({\n  code,\n  className,\n  children,\n  ...rest\n}) => {\n  let classes = \"inline-code\"\n  if (className) {\n    classes = `${classes} ${className}`\n  }\n  return (\n    <span className={classes} {...rest}>\n      {code ? code : children}\n    </span>\n  )\n}\n\nexport default InlineCode\n","import React, { ReactElement } from \"react\"\nimport { Link } from \"gatsby\"\nimport Layout from \"../../components/layout\"\nimport { ValidatorFunction, CodeExample } from \"../../components/validatorFuncs\"\nimport InlineCode from \"../../components/inlineCode\"\nimport Examples from \"../../components/codeExamples\"\n\nfunction StringFunctions(): ReactElement {\n  return (\n    <Layout\n      title=\"String functions\"\n      description=\"Validation functions for use on strings\"\n    >\n      <h1>String Functions</h1>\n      <p>\n        <ul className=\"list\">\n          {[\n            \"NotEmpty\",\n            \"Empty\",\n            \"Regex\",\n            \"StartsWith\",\n            \"EndsWith\",\n            \"Contains\",\n            \"Length\",\n            \"MinLength\",\n            \"MaxLength\",\n            \"Required\",\n            \"Email\",\n          ].map((func) => (\n            <li>\n              <Link to={`/functions/string/#${func}`}>{func}</Link>\n            </li>\n          ))}\n        </ul>\n      </p>\n      <hr className=\"my-6\" />\n      <ValidatorFunction\n        name=\"NotEmpty\"\n        description=\"Ensures the string value being validated is not empty.\"\n        methods={[\n          `NotEmpty()`,\n          `NotEmpty<T>(Expression<Func<T, string>> selector)`,\n        ]}\n        brokenRule=\"Value cannot be empty.\"\n      >\n        <CodeExample\n          label=\"Using type instance.\"\n          code={Examples.String.NotEmpty.Example1}\n        />\n        <CodeExample\n          label=\"Using selector expression.\"\n          code={Examples.String.NotEmpty.Example2}\n        />\n        <CodeExample\n          label={\n            <>\n              Using <InlineCode>For</InlineCode> function.\n            </>\n          }\n          code={Examples.String.NotEmpty.Example3}\n        />\n      </ValidatorFunction>\n      <hr className=\"my-6\" />\n      <ValidatorFunction\n        name=\"Empty\"\n        description=\"Ensures the string value being validated is empty.\"\n        methods={[`Empty()`, `Empty<T>(Expression<Func<T, string>> selector)`]}\n        brokenRule=\"Value must be empty.\"\n      >\n        <CodeExample\n          label=\"Using type instance.\"\n          code={Examples.String.Empty.Example1}\n        />\n        <CodeExample\n          label=\"Using selector expression.\"\n          code={Examples.String.Empty.Example2}\n        />\n        <CodeExample\n          label={\n            <>\n              Using <InlineCode>For</InlineCode> function.\n            </>\n          }\n          code={Examples.String.Empty.Example3}\n        />\n      </ValidatorFunction>\n      <hr className=\"my-6\" />\n      <ValidatorFunction\n        name=\"Regex\"\n        description=\"Ensures the string value being validated matches a regular expression pattern.\"\n        methods={[\n          `Regex(string pattern)`,\n          `Regex(string pattern, RegexOptions options)`,\n          `Regex<T>(Expression<Func<T, string>> selector, string pattern)`,\n          `Regex<T>(Expression<Func<T, string>> selector, string pattern, RegexOptions options)`,\n        ]}\n        brokenRule=\"Value must match pattern.\"\n      >\n        <CodeExample\n          label=\"Using type instance.\"\n          code={Examples.String.Regex.Example1}\n        />\n        <CodeExample\n          label=\"Using selector expression.\"\n          code={Examples.String.Regex.Example2}\n        />\n        <CodeExample\n          label={\n            <>\n              Using <InlineCode>For</InlineCode> function.\n            </>\n          }\n          code={Examples.String.Regex.Example3}\n        />\n        <CodeExample\n          label=\"Using RegexOptions.\"\n          code={Examples.String.Regex.Example4}\n        />\n      </ValidatorFunction>\n      <hr className=\"my-6\" />\n      <ValidatorFunction\n        name=\"StartsWith\"\n        description=\"Ensures the string value being validated starts with the specified value.\"\n        methods={[\n          `StartsWith(string value)`,\n          `StartsWith<T>(Expression<Func<T, string>> selector, string value)`,\n        ]}\n        brokenRule=\"Value must start with '{value}'.\"\n      >\n        <CodeExample\n          label=\"Using type instance.\"\n          code={Examples.String.StartsWith.Example1}\n        />\n        <CodeExample\n          label=\"Using selector expression.\"\n          code={Examples.String.StartsWith.Example2}\n        />\n        <CodeExample\n          label={\n            <>\n              Using <InlineCode>For</InlineCode> function.\n            </>\n          }\n          code={Examples.String.StartsWith.Example3}\n        />\n      </ValidatorFunction>\n      <hr className=\"my-6\" />\n      <ValidatorFunction\n        name=\"EndsWith\"\n        description=\"Ensures the string value being validated ends with the specified value.\"\n        methods={[\n          `EndsWith(string value)`,\n          `EndsWith<T>(Expression<Func<T, string>> selector, string value)`,\n        ]}\n        brokenRule=\"Value must end with '{value}'.\"\n      >\n        <CodeExample\n          label=\"Using type instance.\"\n          code={Examples.String.EndsWith.Example1}\n        />\n        <CodeExample\n          label=\"Using selector expression.\"\n          code={Examples.String.EndsWith.Example2}\n        />\n        <CodeExample\n          label={\n            <>\n              Using <InlineCode>For</InlineCode> function.\n            </>\n          }\n          code={Examples.String.EndsWith.Example3}\n        />\n      </ValidatorFunction>\n      <hr className=\"my-6\" />\n      <ValidatorFunction\n        name=\"Contains\"\n        description=\"Ensures the string value being validated contains the specified value.\"\n        methods={[\n          `Contains(string value)`,\n          `Contains<T>(Expression<Func<T, string>> selector, string value)`,\n        ]}\n        brokenRule=\"Value must contain '{value}'.\"\n      >\n        <CodeExample\n          label=\"Using type instance.\"\n          code={Examples.String.Contains.Example1}\n        />\n        <CodeExample\n          label=\"Using selector expression.\"\n          code={Examples.String.Contains.Example2}\n        />\n        <CodeExample\n          label={\n            <>\n              Using <InlineCode>For</InlineCode> function.\n            </>\n          }\n          code={Examples.String.Contains.Example3}\n        />\n      </ValidatorFunction>\n      <hr className=\"my-6\" />\n      <ValidatorFunction\n        name=\"Length\"\n        description=\"Ensures the string value being validated has a length within the specified range.\"\n        methods={[\n          `Length(int min, int max)`,\n          `Length<T>(Expression<Func<T, string>> selector, int min, int max)`,\n        ]}\n        brokenRule=\"Value must be {min} to {max} characters in length.\"\n      >\n        <CodeExample\n          label=\"Using type instance.\"\n          code={Examples.String.Length.Example1}\n        />\n        <CodeExample\n          label=\"Using selector expression.\"\n          code={Examples.String.Length.Example2}\n        />\n        <CodeExample\n          label={\n            <>\n              Using <InlineCode>For</InlineCode> function.\n            </>\n          }\n          code={Examples.String.Length.Example3}\n        />\n      </ValidatorFunction>\n      <hr className=\"my-6\" />\n      <ValidatorFunction\n        name=\"MinLength\"\n        description=\"Ensures the string value being validated has a minimum length.\"\n        methods={[\n          `MinLength(int min)`,\n          `MinLength<T>(Expression<Func<T, string>> selector, int min)`,\n        ]}\n        brokenRule=\"Value must have minimum length of {min}.\"\n      >\n        <CodeExample\n          label=\"Using type instance.\"\n          code={Examples.String.MinLength.Example1}\n        />\n        <CodeExample\n          label=\"Using selector expression.\"\n          code={Examples.String.MinLength.Example2}\n        />\n        <CodeExample\n          label={\n            <>\n              Using <InlineCode>For</InlineCode> function.\n            </>\n          }\n          code={Examples.String.MinLength.Example3}\n        />\n      </ValidatorFunction>\n      <hr className=\"my-6\" />\n      <ValidatorFunction\n        name=\"MaxLength\"\n        description=\"Ensures the string value being validated has a maximum length.\"\n        methods={[\n          `MaxLength(int max)`,\n          `MaxLength<T>(Expression<Func<T, string>> selector, int max)`,\n        ]}\n        brokenRule=\"Value must have maximum length of {max}.\"\n      >\n        <CodeExample\n          label=\"Using type instance.\"\n          code={Examples.String.MaxLength.Example1}\n        />\n        <CodeExample\n          label=\"Using selector expression.\"\n          code={Examples.String.MaxLength.Example2}\n        />\n        <CodeExample\n          label={\n            <>\n              Using <InlineCode>For</InlineCode> function.\n            </>\n          }\n          code={Examples.String.MaxLength.Example3}\n        />\n      </ValidatorFunction>\n      <hr className=\"my-6\" />\n      <ValidatorFunction\n        name=\"Required\"\n        description=\"Ensures the string value being validated is not null or empty or whitespace.\"\n        methods={[\n          `Required()`,\n          `Required<T>(Expression<Func<T, string>> selector)`,\n        ]}\n        brokenRule=\"Value is required.\"\n      >\n        <CodeExample\n          label=\"Using type instance.\"\n          code={Examples.String.Required.Example1}\n        />\n        <CodeExample\n          label=\"Using selector expression.\"\n          code={Examples.String.Required.Example2}\n        />\n        <CodeExample\n          label={\n            <>\n              Using <InlineCode>For</InlineCode> function.\n            </>\n          }\n          code={Examples.String.Required.Example3}\n        />\n      </ValidatorFunction>\n      <hr className=\"my-6\" />\n      <ValidatorFunction\n        name=\"Email\"\n        description=\"Ensures the string value being validated is an email address.\"\n        methods={[`Email()`, `Email<T>(Expression<Func<T, string>> selector)`]}\n        brokenRule=\"Value must be a valid email.\"\n      >\n        <CodeExample\n          label=\"Using type instance.\"\n          code={Examples.String.Email.Example1}\n        />\n        <CodeExample\n          label=\"Using selector expression.\"\n          code={Examples.String.Email.Example2}\n        />\n        <CodeExample\n          label={\n            <>\n              Using <InlineCode>For</InlineCode> function.\n            </>\n          }\n          code={Examples.String.Email.Example3}\n        />\n      </ValidatorFunction>\n    </Layout>\n  )\n}\n\nexport default StringFunctions\n","import React, { FC } from \"react\"\nimport InlineCode from \"./inlineCode\"\nimport CSharp from \"./csharp\"\n\ntype FunctionProps = {\n  name: string\n  description: string\n  methods: string[]\n  brokenRule?: string\n}\n\nexport const ValidatorFunction: FC<FunctionProps> = ({\n  name,\n  description,\n  methods,\n  brokenRule,\n  children,\n}) => {\n  return (\n    <div className=\"mb-4\" id={name}>\n      <h2 className=\"font-semibold\">{name}</h2>\n      <p>{description}</p>\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Methods</h5>\n      {methods.map((method) => (\n        <>\n          <InlineCode className=\"text-sm font-semibold text-blue-600 bg-blue-100\">\n            {method}\n          </InlineCode>\n          <br />\n        </>\n      ))}\n      <h5 className=\"font-semibold text-gray-800 text-sm my-4\">Broken Rule</h5>\n      <p className=\"font-semibold font-mono text-sm text-red-600 inline px-1\">\n        {brokenRule}\n      </p>\n      <h5 className=\"font-semibold text-gray-800 text-sm mt-4\">\n        Example Usage\n      </h5>\n      {children}\n    </div>\n  )\n}\n\ntype CodeExampleProps = {\n  code: string\n  label?: string | JSX.Element\n}\n\nexport const CodeExample: FC<CodeExampleProps> = ({ label, code }) => (\n  <>\n    {label && <p className=\"text-gray-700 mb-0 pb-0 mt-4\">{label}</p>}\n    <CSharp code={code} />\n  </>\n)\n"],"sourceRoot":""}