{"version":3,"sources":["webpack:///./src/components/inlineCode.tsx","webpack:///./src/pages/getting-started/first-validator.tsx","webpack:///./node_modules/core-js/modules/es6.string.repeat.js","webpack:///./node_modules/core-js/modules/_string-repeat.js"],"names":["InlineCode","children","className","indent","text","count","replace","repeat","modelCode","builderCode","validationCode","resultCode","programCode","FirstValidator","to","code","$export","P","toInteger","defined","module","exports","str","String","this","res","n","Infinity","RangeError"],"mappings":"8FAAA,yBAMeA,IAJf,YAAqD,IAA/BC,EAA+B,EAA/BA,SACpB,OAAO,0BAAMC,UAAU,eAAeD,K,oJCIxC,SAASE,EAAOC,EAAcC,GAC5B,OAAOD,EAAKE,QAAQ,cAAe,IAAIC,OAAOF,IAGhD,IAAMG,EAAY,uWAYZC,EAAc,sbAiBdC,EAAiB,wNAUjBC,EAAa,mKAQbC,EAAc,2JASlBT,EAAOM,EAAa,IATL,OAWfN,EAAOO,EAAgB,IAXR,OAafP,EAAOQ,EAAY,IAbJ,kBAgBfR,EAAOK,EAAW,GAhBH,aAgHFK,UAvFf,WACE,OACE,kBAAC,IAAD,KACE,2DACA,qFAC0D,IACxD,kBAAC,IAAD,4BAFF,gBAEkE,IAChE,kBAAC,IAAD,UAHF,yCAGmE,IACjE,kBAAC,OAAD,CAAMC,GAAG,+BAA+BZ,UAAU,iBAAlD,iCAJF,KASA,wBAAIA,UAAU,SACd,gFACqD,IACnD,kBAAC,IAAD,iBAFF,WAIA,yBAAKA,UAAU,iBACb,kBAAC,IAAD,CAAQa,KAAMP,KAEhB,wFACA,wBAAIN,UAAU,aACZ,4BACE,kBAAC,IAAD,kBADF,iBAGA,4BACE,kBAAC,IAAD,iBADF,qDAIA,4BACE,kBAAC,IAAD,cADF,2BAGA,4BACE,kBAAC,IAAD,eADF,gBAC+C,IAC7C,6CAFF,KAIA,4BACE,kBAAC,IAAD,eADF,YAC0C,0CAD1C,OACsE,IACpE,2CAFF,KAIA,4BACE,kBAAC,IAAD,kBADF,6BAGA,4BACE,kBAAC,IAAD,eADF,+CAKF,oGAGA,yBAAKA,UAAU,iBACb,kBAAC,IAAD,CAAQa,KAAMN,IACd,kCACM,kBAAC,IAAD,gBADN,wBAEE,kBAAC,IAAD,4BAFF,kCAGc,kBAAC,IAAD,iBAHd,gBAMF,yBAAKP,UAAU,iBACb,kBAAC,IAAD,CAAQa,KAAML,IACd,kCACM,kBAAC,IAAD,mBADN,oBAC2D,IACzD,kBAAC,IAAD,yBAFF,oEAG6C,IAC3C,kBAAC,OAAD,CAAMI,GAAG,uBAAuBZ,UAAU,iBAA1C,sBAJF,MAUF,yBAAKA,UAAU,iBACb,kBAAC,IAAD,CAAQa,KAAMJ,KAEhB,8FACA,yBAAKT,UAAU,iBACb,kBAAC,IAAD,CAAQa,KAAMH,KAEhB,iEACA,yBAAKV,UAAU,iBACb,kBAAC,IAAD,CAAOa,KAtFI,6M,qBC9EnB,IAAIC,EAAU,EAAQ,QAEtBA,EAAQA,EAAQC,EAAG,SAAU,CAE3BV,OAAQ,EAAQ,W,kCCHlB,IAAIW,EAAY,EAAQ,QACpBC,EAAU,EAAQ,QAEtBC,EAAOC,QAAU,SAAgBhB,GAC/B,IAAIiB,EAAMC,OAAOJ,EAAQK,OACrBC,EAAM,GACNC,EAAIR,EAAUb,GAClB,GAAIqB,EAAI,GAAKA,GAAKC,IAAU,MAAMC,WAAW,2BAC7C,KAAMF,EAAI,GAAIA,KAAO,KAAOJ,GAAOA,GAAc,EAAJI,IAAOD,GAAOH,GAC3D,OAAOG","file":"component---src-pages-getting-started-first-validator-tsx-6803551a4bbef91a9be9.js","sourcesContent":["import React, { ReactElement } from \"react\"\n\nfunction InlineCode({ children }: any): ReactElement {\n  return <span className=\"inline-code\">{children}</span>\n}\n\nexport default InlineCode\n","import React, { ReactElement } from \"react\"\nimport { Link } from \"gatsby\"\nimport Layout from \"../../components/layout\"\nimport CSharp from \"../../components/csharp\"\nimport InlineCode from \"../../components/inlineCode\"\nimport Shell from \"../../components/shell\"\n\nfunction indent(text: string, count: number) {\n  return text.replace(/^(?!\\s*$)/gm, \" \".repeat(count))\n}\n\nconst modelCode = `public class Employee\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string Email { get; set; }\n    public string Phone { get; set; }\n    public string[] Skills { get; set; }\n    public decimal Salary { get; set; }\n    public DateTime Commenced { get; set; }\n    public bool Active { get; set; }\n}`\n\nconst builderCode = `var validator = new ValidatorBuilder<Employee>()\n    .Required(e => e.FirstName)\n    .For(e => e.LastName, name => \n    {\n        name.Required()\n            .MaxLength(30);\n    })\n    .Email(e => e.Email)\n    .Contains(e => e.Skills, \"Cromulent\")\n    .Range(e => e.Salary, 50000, 100000)\n    .LessThanOrEqual(e => e.Commenced, DateTime.Today)\n    .Continue(v =>\n    {\n        v.True(e => e.Active);\n    })\n    .Build();`\n\nconst validationCode = `var employee = new Employee\n{\n    FirstName = \"Homer\",\n    Email = \"homer[at]springfieldnuclear.com\",\n    Salary = 45000,\n    Skills = new[] { \"Embiggening\" }\n};\n\nvar result = validator.Validate(employee);`\n\nconst resultCode = `if (!result.IsValid)\n{\n    foreach (var rule in result.BrokenRules)\n    {\n        Console.WriteLine($\"[{rule.Rule}] {rule.Key}: {rule.Message}\");\n    }\n};`\n\nconst programCode = `using System;\nusing Validatum;\n\nnamespace ConsoleApp\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n${indent(builderCode, 12)}\n\n${indent(validationCode, 12)}\n\n${indent(resultCode, 12)}\n        }\n\n${indent(modelCode, 8)}\n    }\n}`\n\nconst outputCode = `[Required] LastName: Value is required.\n[Email] Email: Value must be a valid email.\n[Contains] Skills: Must contain item 'Cromulent'.\n[Range] Salary: Value must be in range '50000' to '100000'.`\n\nfunction FirstValidator(): ReactElement {\n  return (\n    <Layout>\n      <h1>Create your first Validator</h1>\n      <p>\n        Building a validation function is accomplished with the{\" \"}\n        <InlineCode>ValidatorBuilder&lt;T&gt;</InlineCode> class. Where{\" \"}\n        <InlineCode>T</InlineCode> is the type you want to validate. See{\" \"}\n        <Link to=\"/building/validator-builder/\" className=\"text-blue-500\">\n          The ValidatorBuilder&lt;T&gt; Class\n        </Link>\n        .\n      </p>\n      <hr className=\"my-6\" />\n      <p>\n        For your first validator we will use the following{\" \"}\n        <InlineCode>Employee</InlineCode> model.\n      </p>\n      <div className=\"lg:w-2/3 mb-4\">\n        <CSharp code={modelCode} />\n      </div>\n      <p>Our validation function must satisfy the following rules:</p>\n      <ul className=\"list mb-4\">\n        <li>\n          <InlineCode>FirstName</InlineCode> is required.\n        </li>\n        <li>\n          <InlineCode>LastName</InlineCode> is required and have no more than 30\n          characters.\n        </li>\n        <li>\n          <InlineCode>Email</InlineCode> must be a valid email.\n        </li>\n        <li>\n          <InlineCode>Skills</InlineCode> must contain{\" \"}\n          <strong>Cromulent</strong>.\n        </li>\n        <li>\n          <InlineCode>Salary</InlineCode> between <strong>50,000</strong> and{\" \"}\n          <strong>100,000</strong>.\n        </li>\n        <li>\n          <InlineCode>Commenced</InlineCode> cannot be in the future.\n        </li>\n        <li>\n          <InlineCode>Active</InlineCode> must be true only if previous\n          rules pass.\n        </li>\n      </ul>\n      <p>\n        We can build a validator that will enforce the above rules like this:\n      </p>\n      <div className=\"lg:w-2/3 mb-4\">\n        <CSharp code={builderCode} />\n        <p>\n          The <InlineCode>Build()</InlineCode> method will return a\n          <InlineCode>Validator&lt;Employee&gt;</InlineCode> which can be used\n          to validate <InlineCode>Employee</InlineCode> instances.\n        </p>\n      </div>\n      <div className=\"lg:w-2/3 mb-4\">\n        <CSharp code={validationCode} />\n        <p>\n          The <InlineCode>Validate()</InlineCode> method returns a{\" \"}\n          <InlineCode>ValidationResult</InlineCode> instance containing a\n          collection of broken validation rules. See{\" \"}\n          <Link to=\"/validation/results/\" className=\"text-blue-500\">\n            Validation Results\n          </Link>\n          .\n        </p>\n      </div>\n      <div className=\"lg:w-2/3 mb-4\">\n        <CSharp code={resultCode} />\n      </div>\n      <p>Putting it all together into an executable console application.</p>\n      <div className=\"lg:w-2/3 mb-4\">\n        <CSharp code={programCode} />\n      </div>\n      <p>Will produce the following output:</p>\n      <div className=\"lg:w-2/3 mb-4\">\n        <Shell code={outputCode} />\n      </div>\n    </Layout>\n  )\n}\n\nexport default FirstValidator\n","var $export = require('./_export');\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require('./_string-repeat')\n});\n","'use strict';\nvar toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n"],"sourceRoot":""}